"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractSdkLedgerAccountService = void 0;
const tslib_1 = require("tslib");
const api_client_1 = require("@tatumio/api-client");
class AbstractSdkLedgerAccountService {
    constructor() {
        this.getAccountById = api_client_1.AccountService.getAccountByAccountId;
        this.createAccount = api_client_1.AccountService.createAccount;
        this.createAccounts = api_client_1.AccountService.createAccountBatch;
        this.updateAccount = api_client_1.AccountService.updateAccountByAccountId;
        this.getBlockedAmountsByAccountId = api_client_1.AccountService.getBlockAmountById;
        this.blockAmount = api_client_1.AccountService.blockAmount;
        this.deleteBlockedAmount = api_client_1.AccountService.deleteBlockAmount;
        this.deleteBlockedAmountWithTransaction = api_client_1.AccountService.unblockAmountWithTransaction;
        this.activateAccount = api_client_1.AccountService.activateAccount;
        this.deactivateAccount = api_client_1.AccountService.deactivateAccount;
        this.freezeAccount = api_client_1.AccountService.freezeAccount;
        this.unfreezeAccount = api_client_1.AccountService.unfreezeAccount;
        this.getAccountsByCustomerId = api_client_1.AccountService.getAccountsByCustomerId;
        this.getAllAccounts = api_client_1.AccountService.getAccounts;
        this.getAccountBalance = api_client_1.AccountService.getAccountBalance;
    }
    /**
     * Abstraction unification endpoint for creating new ledger account, optionally added wallet generation, generating deposit blockchain address
     * and register incoming TX webhook notification.
     * @param account Account to be created.
     * @param generateNewWalletFn Function for creation of the new wallet. If you don't want to create a new wallet, pass undefined
     * @param generateNewWallet Function for creation of the new wallet. If you don't want to create a new wallet, pass undefined
     * @param testnet if we are using testnet or not
     * @param webhookUrl optional URL, where webhook will be post for every incoming blockchain transaction to the address
     */
    static generateAccount(account, generateNewWalletFn, generateNewWallet = true, testnet = true, webhookUrl) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let w;
            if (generateNewWallet) {
                w = yield generateNewWalletFn(undefined, { testnet });
                // address not in Wallet
                account.xpub = w.xpub; // || w.address
            }
            const a = yield api_client_1.AccountService.createAccount(account);
            const address = yield api_client_1.ApiServices.virtualAccount.account.generateDepositAddress(a.id);
            if (webhookUrl) {
                yield api_client_1.ApiServices.ledger.subscriptions.createSubscription({
                    type: 'ACCOUNT_INCOMING_BLOCKCHAIN_TRANSACTION',
                    attr: { url: webhookUrl, id: a.id },
                });
            }
            return { account: a, address, wallet: w };
        });
    }
}
exports.AbstractSdkLedgerAccountService = AbstractSdkLedgerAccountService;
//# sourceMappingURL=ledger.account.abstract.js.map