import { Account, AccountService, Address, CreateAccount, Wallet } from '@tatumio/api-client';
export declare type GenerateWalletFn = (mnemonic?: string, options?: {
    testnet?: boolean;
}) => Promise<Wallet>;
export interface GeneratedAccount {
    account: Account;
    address: Address;
    wallet?: Wallet;
}
export declare class AbstractSdkLedgerAccountService {
    getAccountById: typeof AccountService.getAccountByAccountId;
    createAccount: typeof AccountService.createAccount;
    createAccounts: typeof AccountService.createAccountBatch;
    updateAccount: typeof AccountService.updateAccountByAccountId;
    getBlockedAmountsByAccountId: typeof AccountService.getBlockAmountById;
    blockAmount: typeof AccountService.blockAmount;
    deleteBlockedAmount: typeof AccountService.deleteBlockAmount;
    deleteBlockedAmountWithTransaction: typeof AccountService.unblockAmountWithTransaction;
    activateAccount: typeof AccountService.activateAccount;
    deactivateAccount: typeof AccountService.deactivateAccount;
    freezeAccount: typeof AccountService.freezeAccount;
    unfreezeAccount: typeof AccountService.unfreezeAccount;
    getAccountsByCustomerId: typeof AccountService.getAccountsByCustomerId;
    getAllAccounts: typeof AccountService.getAccounts;
    getAccountBalance: typeof AccountService.getAccountBalance;
    /**
     * Abstraction unification endpoint for creating new ledger account, optionally added wallet generation, generating deposit blockchain address
     * and register incoming TX webhook notification.
     * @param account Account to be created.
     * @param generateNewWalletFn Function for creation of the new wallet. If you don't want to create a new wallet, pass undefined
     * @param generateNewWallet Function for creation of the new wallet. If you don't want to create a new wallet, pass undefined
     * @param testnet if we are using testnet or not
     * @param webhookUrl optional URL, where webhook will be post for every incoming blockchain transaction to the address
     */
    static generateAccount(account: CreateAccount & {
        xpub?: string;
    }, generateNewWalletFn: GenerateWalletFn, generateNewWallet?: boolean, testnet?: boolean, webhookUrl?: string): Promise<GeneratedAccount>;
}
