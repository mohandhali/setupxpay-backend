import { AddNftMinter, AddNftMinterKMS, NftErc721OrCompatibleService } from '@tatumio/api-client';
declare type ChainAddMinter = AddNftMinter | AddNftMinterKMS;
export declare const abstractSdkNftService: () => {
    deployNFTSmartContract: typeof NftErc721OrCompatibleService.nftDeployErc721;
    addNFTMinter: typeof NftErc721OrCompatibleService.nftAddMinter;
    mintNFT: typeof NftErc721OrCompatibleService.nftMintErc721;
    mintMultipleNFTs: typeof NftErc721OrCompatibleService.nftMintMultipleErc721;
    burnNFT: typeof NftErc721OrCompatibleService.nftBurnErc721;
    transferNFT: typeof NftErc721OrCompatibleService.nftTransferErc721;
    getNFTTransaction: typeof NftErc721OrCompatibleService.nftGetTransactErc721;
    getNFTTransactionsByToken: typeof NftErc721OrCompatibleService.nftGetTransactionByToken;
    getNFTTransactionsByAddress: typeof NftErc721OrCompatibleService.nftGetTransactionByAddress;
    getNFTsByAddress: typeof NftErc721OrCompatibleService.nftGetTokensByAddressErc721;
    getNFTMetadataURI: typeof NftErc721OrCompatibleService.nftGetMetadataErc721;
    getNFTAccountBalance: typeof NftErc721OrCompatibleService.nftGetBalanceErc721;
    getNFTContractAddress: typeof NftErc721OrCompatibleService.nftGetContractAddress;
    getNFTImage: (chain: 'ETH' | 'MATIC' | 'KCS' | 'SOL' | 'ONE' | 'KLAY' | 'CELO' | 'TRON' | 'FLOW' | 'BSC', contractAddress: string, tokenId: string, account?: string) => Promise<{
        originalUrl: string;
        publicUrl: string;
    } | null>;
    prepareAddNftMinterAbstraction: (body: ChainAddMinter) => string[];
};
export {};
