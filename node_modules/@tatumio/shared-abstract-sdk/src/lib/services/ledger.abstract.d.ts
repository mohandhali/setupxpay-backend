import { AccountService, CreateAccount, CustomerService, OrderBookService, TransactionFilter, TransactionFilterCustomer, TransactionService, VirtualCurrencyService } from '@tatumio/api-client';
import { GeneratedAccount, GenerateWalletFn } from './ledger/ledger.account.abstract';
export declare const abstractSdkLedgerService: () => {
    customer: {
        get: typeof CustomerService.getCustomerByExternalOrInternalId;
        getAll: typeof CustomerService.findAllCustomers;
        update: typeof CustomerService.updateCustomer;
        activate: typeof CustomerService.activateCustomer;
        deactivate: typeof CustomerService.deactivateCustomer;
        enable: typeof CustomerService.enableCustomer;
        disable: typeof CustomerService.disableCustomer;
    };
    orderBook: {
        getHistorical: typeof OrderBookService.getHistoricalTradesBody;
        getActiveBuyTrades: typeof OrderBookService.getBuyTradesBody;
        getActiveSellTrades: typeof OrderBookService.getSellTradesBody;
        newTrade: typeof OrderBookService.storeTrade;
        get: typeof OrderBookService.getTradeById;
        cancel: typeof OrderBookService.deleteTrade;
        cancelByAccount: typeof OrderBookService.deleteAccountTrades;
    };
    transaction: {
        send: typeof TransactionService.sendTransaction;
        sendMultiple: typeof TransactionService.sendTransactionBatch;
        getAll: typeof TransactionService.getTransactions;
        getAllByAccount: typeof TransactionService.getTransactionsByAccountId;
        getAllByCustomer: typeof TransactionService.getTransactionsByCustomerId;
        getAllByReference: typeof TransactionService.getTransactionsByReference;
        countByAccount: (filter: TransactionFilter) => import("@tatumio/api-client").CancelablePromise<number | import("@tatumio/api-client").Transaction[]>;
        countByCustomer: (filter: TransactionFilterCustomer) => import("@tatumio/api-client").CancelablePromise<number | import("@tatumio/api-client").Transaction[]>;
    };
    virtualCurrency: {
        create: typeof VirtualCurrencyService.createCurrency;
        mint: typeof VirtualCurrencyService.mintCurrency;
        revoke: typeof VirtualCurrencyService.revokeCurrency;
        getByName: typeof VirtualCurrencyService.getCurrency;
        update: typeof VirtualCurrencyService.updateCurrency;
    };
    blockAmount: {
        block: typeof AccountService.blockAmount;
        unblock: typeof AccountService.deleteBlockAmount;
        unblockWithTransaction: typeof AccountService.unblockAmountWithTransaction;
    };
    account: {
        get: typeof AccountService.getAccountByAccountId;
        getAll: typeof AccountService.getAccounts;
        getByCustomerId: typeof AccountService.getAccountsByCustomerId;
        getBalance: typeof AccountService.getAccountBalance;
        create: typeof AccountService.createAccount;
        createMultiple: typeof AccountService.createAccountBatch;
        update: typeof AccountService.updateAccountByAccountId;
        getBlockedAmountsByAccountId: typeof AccountService.getBlockAmountById;
        activate: typeof AccountService.activateAccount;
        deactivate: typeof AccountService.deactivateAccount;
        freeze: typeof AccountService.freezeAccount;
        unfreeze: typeof AccountService.unfreezeAccount;
        /**
         * Abstraction unification endpoint for creating new ledger account, optionally added wallet generation, generating deposit blockchain address
         * and register incoming TX webhook notification.
         * @param account Account to be created.
         * @param generateNewWalletFn Function for creation of the new wallet. If you don't want to create a new wallet, pass undefined
         * @param generateNewWallet Function for creation of the new wallet. If you don't want to create a new wallet, pass undefined
         * @param testnet if we are using testnet or not
         * @param webhookUrl optional URL, where webhook will be post for every incoming blockchain transaction to the address
         */
        generate: (account: CreateAccount & {
            xpub?: string;
        }, generateNewWalletFn: GenerateWalletFn, generateNewWallet?: boolean, testnet?: boolean, webhookUrl?: string) => Promise<GeneratedAccount>;
    };
};
