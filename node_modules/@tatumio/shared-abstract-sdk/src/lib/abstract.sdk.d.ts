import { IpfsService, MaliciousAddressService, NotificationSubscriptionsService, ServiceUtilsService, TatumUrlArg } from '@tatumio/api-client';
import { SdkLoggerConfig } from './logger';
export interface SDKArguments {
    apiKey: string;
    url?: TatumUrlArg;
    provider?: string;
    logger?: SdkLoggerConfig;
}
export declare const abstractSdk: (args: SDKArguments) => {
    subscriptions: typeof NotificationSubscriptionsService;
    security: {
        checkMaliciousAddress: typeof MaliciousAddressService.checkMalicousAddress;
    };
    tatum: {
        getCredits: typeof ServiceUtilsService.getCredits;
        getVersion: typeof ServiceUtilsService.getVersion;
        freezeApiKey: typeof ServiceUtilsService.freezeApiKey;
        unfreezeApiKey: typeof ServiceUtilsService.unfreezeApiKey;
    };
    kms: {
        get: typeof import("@tatumio/api-client").KeyManagementSystemService.getPendingTransactionToSign;
        complete: typeof import("@tatumio/api-client").KeyManagementSystemService.completePendingSignature;
        delete: typeof import("@tatumio/api-client").KeyManagementSystemService.deletePendingTransactionToSign;
    };
    ledger: {
        customer: {
            get: typeof import("@tatumio/api-client").CustomerService.getCustomerByExternalOrInternalId;
            getAll: typeof import("@tatumio/api-client").CustomerService.findAllCustomers;
            update: typeof import("@tatumio/api-client").CustomerService.updateCustomer;
            activate: typeof import("@tatumio/api-client").CustomerService.activateCustomer;
            deactivate: typeof import("@tatumio/api-client").CustomerService.deactivateCustomer;
            enable: typeof import("@tatumio/api-client").CustomerService.enableCustomer;
            disable: typeof import("@tatumio/api-client").CustomerService.disableCustomer;
        };
        orderBook: {
            getHistorical: typeof import("@tatumio/api-client").OrderBookService.getHistoricalTradesBody;
            getActiveBuyTrades: typeof import("@tatumio/api-client").OrderBookService.getBuyTradesBody;
            getActiveSellTrades: typeof import("@tatumio/api-client").OrderBookService.getSellTradesBody;
            newTrade: typeof import("@tatumio/api-client").OrderBookService.storeTrade;
            get: typeof import("@tatumio/api-client").OrderBookService.getTradeById;
            cancel: typeof import("@tatumio/api-client").OrderBookService.deleteTrade;
            cancelByAccount: typeof import("@tatumio/api-client").OrderBookService.deleteAccountTrades;
        };
        transaction: {
            send: typeof import("@tatumio/api-client").TransactionService.sendTransaction;
            sendMultiple: typeof import("@tatumio/api-client").TransactionService.sendTransactionBatch;
            getAll: typeof import("@tatumio/api-client").TransactionService.getTransactions;
            getAllByAccount: typeof import("@tatumio/api-client").TransactionService.getTransactionsByAccountId;
            getAllByCustomer: typeof import("@tatumio/api-client").TransactionService.getTransactionsByCustomerId;
            getAllByReference: typeof import("@tatumio/api-client").TransactionService.getTransactionsByReference;
            countByAccount: (filter: import("@tatumio/api-client").TransactionFilter) => import("@tatumio/api-client").CancelablePromise<number | import("@tatumio/api-client").Transaction[]>;
            countByCustomer: (filter: import("@tatumio/api-client").TransactionFilterCustomer) => import("@tatumio/api-client").CancelablePromise<number | import("@tatumio/api-client").Transaction[]>;
        };
        virtualCurrency: {
            create: typeof import("@tatumio/api-client").VirtualCurrencyService.createCurrency;
            mint: typeof import("@tatumio/api-client").VirtualCurrencyService.mintCurrency;
            revoke: typeof import("@tatumio/api-client").VirtualCurrencyService.revokeCurrency;
            getByName: typeof import("@tatumio/api-client").VirtualCurrencyService.getCurrency;
            update: typeof import("@tatumio/api-client").VirtualCurrencyService.updateCurrency;
        };
        blockAmount: {
            block: typeof import("@tatumio/api-client").AccountService.blockAmount;
            unblock: typeof import("@tatumio/api-client").AccountService.deleteBlockAmount;
            unblockWithTransaction: typeof import("@tatumio/api-client").AccountService.unblockAmountWithTransaction;
        };
        account: {
            get: typeof import("@tatumio/api-client").AccountService.getAccountByAccountId;
            getAll: typeof import("@tatumio/api-client").AccountService.getAccounts;
            getByCustomerId: typeof import("@tatumio/api-client").AccountService.getAccountsByCustomerId;
            getBalance: typeof import("@tatumio/api-client").AccountService.getAccountBalance;
            create: typeof import("@tatumio/api-client").AccountService.createAccount;
            createMultiple: typeof import("@tatumio/api-client").AccountService.createAccountBatch;
            update: typeof import("@tatumio/api-client").AccountService.updateAccountByAccountId;
            getBlockedAmountsByAccountId: typeof import("@tatumio/api-client").AccountService.getBlockAmountById;
            activate: typeof import("@tatumio/api-client").AccountService.activateAccount;
            deactivate: typeof import("@tatumio/api-client").AccountService.deactivateAccount;
            freeze: typeof import("@tatumio/api-client").AccountService.freezeAccount;
            unfreeze: typeof import("@tatumio/api-client").AccountService.unfreezeAccount;
            generate: (account: import("@tatumio/api-client").CreateAccount & {
                xpub?: string;
            }, generateNewWalletFn: import("./services/ledger/ledger.account.abstract").GenerateWalletFn, generateNewWallet?: boolean, testnet?: boolean, webhookUrl?: string) => Promise<import("./services/ledger/ledger.account.abstract").GeneratedAccount>;
        };
    };
};
export declare const abstractSdkNft: () => {
    nft: {
        deployNFTSmartContract: typeof import("@tatumio/api-client").NftErc721OrCompatibleService.nftDeployErc721;
        addNFTMinter: typeof import("@tatumio/api-client").NftErc721OrCompatibleService.nftAddMinter;
        mintNFT: typeof import("@tatumio/api-client").NftErc721OrCompatibleService.nftMintErc721;
        mintMultipleNFTs: typeof import("@tatumio/api-client").NftErc721OrCompatibleService.nftMintMultipleErc721;
        burnNFT: typeof import("@tatumio/api-client").NftErc721OrCompatibleService.nftBurnErc721;
        transferNFT: typeof import("@tatumio/api-client").NftErc721OrCompatibleService.nftTransferErc721;
        getNFTTransaction: typeof import("@tatumio/api-client").NftErc721OrCompatibleService.nftGetTransactErc721;
        getNFTTransactionsByToken: typeof import("@tatumio/api-client").NftErc721OrCompatibleService.nftGetTransactionByToken;
        getNFTTransactionsByAddress: typeof import("@tatumio/api-client").NftErc721OrCompatibleService.nftGetTransactionByAddress;
        getNFTsByAddress: typeof import("@tatumio/api-client").NftErc721OrCompatibleService.nftGetTokensByAddressErc721;
        getNFTMetadataURI: typeof import("@tatumio/api-client").NftErc721OrCompatibleService.nftGetMetadataErc721;
        getNFTAccountBalance: typeof import("@tatumio/api-client").NftErc721OrCompatibleService.nftGetBalanceErc721;
        getNFTContractAddress: typeof import("@tatumio/api-client").NftErc721OrCompatibleService.nftGetContractAddress;
        getNFTImage: (chain: "ETH" | "MATIC" | "KCS" | "SOL" | "ONE" | "KLAY" | "CELO" | "TRON" | "FLOW" | "BSC", contractAddress: string, tokenId: string, account?: string) => Promise<{
            originalUrl: string;
            publicUrl: string;
        }>;
        prepareAddNftMinterAbstraction: (body: import("@tatumio/api-client").AddNftMinter | import("@tatumio/api-client").AddNftMinterKMS) => string[];
    };
    storage: {
        upload: typeof IpfsService.storeIpfs;
        get: typeof IpfsService.getIpfsData;
    };
};
