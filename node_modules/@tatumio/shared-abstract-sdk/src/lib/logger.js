"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.logger = exports.LoggerDefaultConfigs = void 0;
const consoleLogger = {
    log(message, ...optionalParams) {
        console.log(message, ...optionalParams);
    },
    debug(message, ...optionalParams) {
        console.debug(message, ...optionalParams);
    },
    info(message, ...optionalParams) {
        console.info(message, ...optionalParams);
    },
    warn(message, ...optionalParams) {
        console.warn(message, ...optionalParams);
    },
    error(message, ...optionalParams) {
        console.error(message, ...optionalParams);
    },
};
const ignoredLogger = {
    log(message, ...optionalParams) {
        //ignore
    },
};
exports.LoggerDefaultConfigs = {
    ignoredLogger,
    consoleLogger,
};
exports.logger = {
    log(message, ...optionalParams) {
        activeLogger.log(message, ...optionalParams);
    },
    debug(message, ...optionalParams) {
        var _a;
        const logMethod = (_a = activeLogger.debug) !== null && _a !== void 0 ? _a : activeLogger.log;
        logMethod(message, ...optionalParams);
    },
    info(message, ...optionalParams) {
        var _a;
        const logMethod = (_a = activeLogger.info) !== null && _a !== void 0 ? _a : activeLogger.log;
        logMethod(message, ...optionalParams);
    },
    warn(message, ...optionalParams) {
        var _a;
        const logMethod = (_a = activeLogger.warn) !== null && _a !== void 0 ? _a : activeLogger.log;
        logMethod(message, ...optionalParams);
    },
    error(message, ...optionalParams) {
        var _a;
        const logMethod = (_a = activeLogger.error) !== null && _a !== void 0 ? _a : activeLogger.log;
        logMethod(message, ...optionalParams);
    },
    useLogger(customLogger) {
        if (customLogger) {
            activeLogger = customLogger;
        }
    },
};
let activeLogger = exports.LoggerDefaultConfigs.ignoredLogger;
//# sourceMappingURL=logger.js.map