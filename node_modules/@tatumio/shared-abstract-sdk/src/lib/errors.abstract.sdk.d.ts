export declare type SdkOriginalError = {
    originalError?: Error;
    originalErrorAsString?: string;
    errorSubstringMapping?: {
        [key: string]: SdkErrorCode;
    };
    errorSubstringDefaultMapper?: (errorString: string) => string;
};
export declare type SdkCodeError = {
    code: SdkErrorCode;
    messageArgs?: SdkMessageArgs;
    originalError?: Error;
};
export declare function isSdkError(error: Error | unknown): error is SdkError;
export declare class SdkError extends Error {
    readonly errorCode?: SdkErrorCode;
    readonly errorMessage?: string;
    readonly originalError?: Error | string;
    constructor(args: SdkOriginalError | SdkCodeError);
}
export declare type SdkMessageArgs = (string | number)[];
export declare enum SdkErrorCode {
    API_ERROR = "api.error",
    COMMON_ERROR = "sdk.common.error",
    BTC_BASED_FEE_TOO_SMALL = "btc-based.fee.too-small",
    BTC_BASED_UTXO_NOT_FOUND = "btc-based.utxo.not-found",
    BTC_BASED_NO_INPUTS = "btc-based.no.inputs",
    BTC_BASED_NOT_ENOUGH_BALANCE = "btc-based.balance.not-enough",
    BTC_FEE_IS_TOO_LARGE = "btc-based.fee.too-large",
    XRP_SECRET_DOES_NOT_MATCH = "xrp.secret.does-not-match",
    FEE_TOO_SMALL = "fee.too-small",
    TX_NOT_FOUND = "tx.not.found",
    ADA_BASED_AMOUNT = "ada.validation.amount",
    BTC_BASED_AMOUNT = "btc-based.validation.amount",
    BTC_BASED_MISSING_PRIVATE_KEY = "btc-based.validation.private-key.missing",
    BTC_BASED_WRONG_PRIVATE_KEY = "btc-based.validation.private-key.wrong",
    BTC_BASED_WRONG_BODY = "btc-based.validation.body.wrong-body",
    BTC_BASED_TX_PREPARATION_UTXO = "transaction.preparation.failed.utxo",
    BTC_BASED_DESTINATION_LESS_THAN_ZERO = "transaction.preparation.destination.less.than.zero",
    BTC_BASED_MNEMONIC_OR_KEYPAIR_EXPECTED = "transaction.preparation.mnemonic.or.keypair.not.present",
    BTC_BASED_TX_FAILED = "transaction.preparation.failed",
    BTC_BASED_BLOCKCHAIN_ERROR = "transaction.preparation.blockchain.error",
    BTC_BASED_DUST_AMOUNT = "transaction.output.dust.amount",
    VALIDATION_AMOUNT = "validation.amount",
    SECRET_CHECKSUM = "validation.secret.checksum",
    VALIDATION_TO_ADDRESS = "validation.to-address",
    TX_PREPARATION_FAILED = "tx.preparation",
    FEE_CHANGE_ADDRESS = "fee.change-address",
    XLM_NO_SEQUENCE = "xlm.account.no-sequence",
    FLOW_MISSING_PRIVATE_KEY = "flow.private-key.missing",
    FLOW_MISSING_MNEMONIC = "flow.mnemonic.missing",
    FLOW_MISSING_NETWORK = "flow.network.missing",
    CELO_MISSING_CURRENCY = "celo.missing.currency",
    CELO_MISSING_CONTRACT_ADDRESS = "celo.missing.contract-address",
    CELO_NATIVE_CANNOT_PREPARE_TRANSFER_CELO_OR_CUSD_TX = "celo.native.cannot.prepare.transfer-celo-or-cusd-tx",
    SOLANA_KMS_COMBINATION = "solana.kms.combination",
    SOLANA_DECIMAL_PLACES = "solana.amount.decimals",
    ALGO_TOKEN_NAME_TOO_LONG = "algo.token.name.too-long",
    EVM_CANNOT_SIGN_TRANSACTION = "evm-based.cannot.sign-transaction",
    EVM_CANNOT_ESTIMATE_GAS_LIMIT = "evm-based.cannot.estimate-gas-limit",
    EVM_INVALID_ADDRESS_SINGLE = "evm-based.invalid.single-address",
    EVM_INVALID_ADDRESS_ARRAY = "evm-based.invalid.array-address",
    EVM_NATIVE_CANNOT_PREPARE_TRANSFER_TX = "evm-based.native.cannot.prepare.transfer-tx",
    EVM_NATIVE_CANNOT_PREPARE_STORE_DATA_TX = "evm-based.native.cannot.prepare.store-data-tx",
    EVM_ERC20_CANNOT_PREPARE_DEPLOY_TX = "evm-based.erc20.cannot.prepare.deploy-tx",
    EVM_ERC20_CANNOT_PREPARE_MINT_TX = "evm-based.erc20.cannot.prepare.mint-tx",
    EVM_ERC20_CANNOT_PREPARE_TRANSFER_TX = "evm-based.erc20.cannot.prepare.transfer-tx",
    EVM_ERC20_CANNOT_PREPARE_BURN_TX = "evm-based.erc20.cannot.prepare.burn-tx",
    EVM_ERC20_CANNOT_PREPARE_APPROVE_TX = "evm-based.erc20.cannot.prepare.approve-tx",
    EVM_ERC721_CANNOT_PREPARE_DEPLOY_TX = "evm-based.erc721.cannot.prepare.deploy-tx",
    EVM_ERC721_CANNOT_PREPARE_MINT_TX = "evm-based.erc721.cannot.prepare.mint-tx",
    EVM_ERC721_CANNOT_PREPARE_MINT_CASHBACK_TX = "evm-based.erc721.cannot.prepare.mint-cashback-tx",
    EVM_ERC721_CANNOT_PREPARE_MINT_MULTIPLE_CASHBACK_TX = "evm-based.erc721.cannot.prepare.mint-multiple-cashback-tx",
    EVM_ERC721_CANNOT_PREPARE_MINT_MULTIPLE_TX = "evm-based.erc721.cannot.prepare.mint-multiple-tx",
    EVM_ERC721_CANNOT_PREPARE_MINT_PROVENANCE_TX = "evm-based.erc721.cannot.prepare.mint-provenance-tx",
    EVM_ERC721_CANNOT_PREPARE_MINT_MULTIPLE_PROVENANCE_TX = "evm-based.erc721.cannot.prepare.mint-multiple-provenance-tx",
    EVM_ERC721_CANNOT_PREPARE_ADD_MINTER = "evm-based.erc721.cannot.prepare.add-minter",
    EVM_ERC721_CANNOT_PREPARE_BURN_TX = "evm-based.erc721.cannot.prepare.burn-tx",
    EVM_ERC721_CANNOT_PREPARE_TRANSFER_TX = "evm-based.erc721.cannot.prepare.transfer-tx",
    EVM_ERC721_CANNOT_PREPARE_UPDATE_CASHBACK_TX = "evm-based.erc721.cannot.prepare.update-cashback-tx",
    EVM_ERC721_CANNOT_PREPARE_MINT_ALREADY_MINTED = "evm-based.erc721.cannot.prepare.mint-minted",
    EVM_ERC1155_CANNOT_PREPARE_DEPLOY_TX = "evm-based.erc1155.cannot.prepare.deploy-tx",
    EVM_ERC1155_CANNOT_PREPARE_MINT_TX = "evm-based.erc1155.cannot.prepare.mint-tx",
    EVM_ERC1155_CANNOT_PREPARE_MINT_BATCH_TX = "evm-based.erc1155.cannot.prepare.mint-batch-tx",
    EVM_ERC1155_CANNOT_PREPARE_TRANSFER_TX = "evm-based.erc1155.cannot.prepare.transfer-tx",
    EVM_ERC1155_CANNOT_PREPARE_TRANSFER_BATCH_TX = "evm-based.erc1155.cannot.prepare.transfer-batch-tx",
    EVM_ERC1155_CANNOT_PREPARE_BURN_TX = "evm-based.erc1155.cannot.prepare.burn-tx",
    EVM_ERC1155_CANNOT_PREPARE_BURN_BATCH_TX = "evm-based.erc1155.cannot.prepare.burn-batch-tx",
    EVM_CUSTODIAL_CANNOT_PREPARE_DEPLOY_TX = "evm-based.custodial.cannot.prepare.deploy-tx",
    EVM_CUSTODIAL_CANNOT_PREPARE_TRANSFER_TX = "evm-based.custodial.cannot.prepare.transfer-tx",
    EVM_CUSTODIAL_CANNOT_PREPARE_TRANSFER_BATCH_TX = "evm-based.custodial.cannot.prepare.transfer-batch-tx",
    EVM_CUSTODIAL_CANNOT_PREPARE_APPROVE_TX = "evm-based.custodial.cannot.prepare.approve-tx",
    EVM_GAS_PUMP_CANNOT_PREPARE_DEPLOY_BATCH_TX = "evm-based.custodial.cannot.prepare.deploy-batch-tx",
    EVM_SMART_CONTRACT_CANNOT_PREPARE_TX = "evm-based.smart-contract.cannot.prepare.tx",
    KMS_CHAIN_MISMATCH = "kms.chain.mismatch",
    INSUFFICIENT_FUNDS = "insufficient.funds.on.sender.account",
    EVM_TRANSACTION_ERROR = "evm-based.smart-contract.transaction.error",
    PARAMETER_MISMATCH = "parameter.mismatch"
}
export declare const SdkErrorMessage: Map<SdkErrorCode, string>;
