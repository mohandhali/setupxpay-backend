"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.httpHelper = exports.httpFetch = exports.httpAxios = exports.httpCommon = void 0;
const tslib_1 = require("tslib");
const api_client_1 = require("@tatumio/api-client");
const axios_1 = tslib_1.__importDefault(require("axios"));
const blockchain_common_1 = require("./blockchain.common");
const EndpointsMapping = {
    HARMONY: 'one',
    BTC: 'bitcoin',
    DOGE: 'dogecoin',
    EGLD: 'egld',
    FLOW: 'flow',
    LTC: 'litecoin',
    NEO: 'neo',
    POLYGON: 'polygon',
    SOL: 'solana',
    TRON: 'tron',
    VET: 'vet',
    XRP: 'xrp',
    ETH: 'ethereum',
    CELO: 'celo',
    BSC: 'bsc',
    ALGO: 'algorand',
    ADA: 'ada',
    BCH: 'bcash',
    XDC: 'xdc',
    XLM: 'xlm',
    KCS: 'kcs',
    KLAY: 'klaytn',
    TEZOS: 'tezos',
    EON: 'eon',
    CHILIZ: 'chiliz',
    FLR: 'flare',
    CRO: 'cronos',
    BASE: 'base',
    AVAX: 'avalanche',
    OPTIMISM: 'optimism',
    FTM: 'fantom',
    TON: 'ton',
    ZK_SYNC: 'zks',
    RON: 'ron',
    S: 'sonic',
    KAIA: 'kaia',
    BERA: 'bera',
    SUI: 'sui'
};
const isWebWorker = typeof self === 'object' &&
    self.constructor &&
    ['DedicatedWorkerGlobalScope', 'ServiceWorkerGlobalScope'].includes(self.constructor.name);
exports.httpCommon = {
    web3Endpoint: (blockchain, url, apiKey) => {
        return `${url}/${api_client_1.TATUM_API_CONSTANTS.API_VERSION}/${EndpointsMapping[blockchain]}/web3/${apiKey}`;
    },
    rpcEndpoint: (blockchain, url, apiKey) => {
        const chain = blockchain_common_1.blockchainHelper.getDefaultCurrencyByBlockchain(blockchain);
        return `${url}/${api_client_1.TATUM_API_CONSTANTS.API_VERSION}/blockchain/node/${chain}/${apiKey}`;
    },
};
exports.httpAxios = Object.assign({ get: axios_1.default.get, post: axios_1.default.post, axios: axios_1.default.create(), CancelToken: axios_1.default.CancelToken }, exports.httpCommon);
exports.httpFetch = Object.assign({ get: (url, config) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const response = yield fetch(url, {
            method: 'GET',
            headers: Object.assign(Object.assign({}, config === null || config === void 0 ? void 0 : config.headers), { 'Content-Type': 'application/json' }),
        });
        return response.json();
    }), post: (url, body, config) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const response = yield fetch(url, {
            method: 'POST',
            headers: Object.assign(Object.assign({}, config === null || config === void 0 ? void 0 : config.headers), { 'Content-Type': 'application/json' }),
            body: JSON.stringify(body),
        });
        return response.json();
    }) }, exports.httpCommon);
exports.httpHelper = isWebWorker ? exports.httpFetch : exports.httpAxios;
//# sourceMappingURL=http.common.js.map