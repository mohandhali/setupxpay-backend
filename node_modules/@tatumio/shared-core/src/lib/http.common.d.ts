import { Blockchain, EvmBasedBlockchain } from './models/Blockchain';
export declare const httpCommon: {
    web3Endpoint: (blockchain: EvmBasedBlockchain, url: string, apiKey: string) => string;
    rpcEndpoint: (blockchain: Blockchain, url: string, apiKey: string) => string;
};
export declare const httpAxios: {
    web3Endpoint: (blockchain: EvmBasedBlockchain, url: string, apiKey: string) => string;
    rpcEndpoint: (blockchain: Blockchain, url: string, apiKey: string) => string;
    get: <T = any, R = import("axios").AxiosResponse<T, any>, D = any>(url: string, config?: import("axios").AxiosRequestConfig<D>) => Promise<R>;
    post: <T_1 = any, R_1 = import("axios").AxiosResponse<T_1, any>, D_1 = any>(url: string, data?: D_1, config?: import("axios").AxiosRequestConfig<D_1>) => Promise<R_1>;
    axios: import("axios").AxiosInstance;
    CancelToken: import("axios").CancelTokenStatic;
};
export declare const httpFetch: {
    web3Endpoint: (blockchain: EvmBasedBlockchain, url: string, apiKey: string) => string;
    rpcEndpoint: (blockchain: Blockchain, url: string, apiKey: string) => string;
    get: (url: string, config?: any) => Promise<any>;
    post: (url: string, body: any, config?: any) => Promise<any>;
};
export declare const httpHelper: {
    web3Endpoint: (blockchain: EvmBasedBlockchain, url: string, apiKey: string) => string;
    rpcEndpoint: (blockchain: Blockchain, url: string, apiKey: string) => string;
    get: <T = any, R = import("axios").AxiosResponse<T, any>, D = any>(url: string, config?: import("axios").AxiosRequestConfig<D>) => Promise<R>;
    post: <T_1 = any, R_1 = import("axios").AxiosResponse<T_1, any>, D_1 = any>(url: string, data?: D_1, config?: import("axios").AxiosRequestConfig<D_1>) => Promise<R_1>;
    axios: import("axios").AxiosInstance;
    CancelToken: import("axios").CancelTokenStatic;
} | {
    web3Endpoint: (blockchain: EvmBasedBlockchain, url: string, apiKey: string) => string;
    rpcEndpoint: (blockchain: Blockchain, url: string, apiKey: string) => string;
    get: (url: string, config?: any) => Promise<any>;
    post: (url: string, body: any, config?: any) => Promise<any>;
};
