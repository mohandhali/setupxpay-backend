"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TatumTronSDK = void 0;
const api_client_1 = require("@tatumio/api-client");
const shared_core_1 = require("@tatumio/shared-core");
const shared_abstract_sdk_1 = require("@tatumio/shared-abstract-sdk");
const shared_blockchain_abstract_1 = require("@tatumio/shared-blockchain-abstract");
const tron_web_1 = require("./services/tron.web");
const tron_tx_1 = require("./services/tron.tx");
const tron_wallet_1 = require("./services/tron.wallet");
const tron_record_1 = require("./services/tron.record");
const tron_kms_1 = require("./services/tron.kms");
const tron_virtualAccount_1 = require("./services/tron.virtualAccount");
const blockchain = shared_core_1.Blockchain.TRON;
const TatumTronSDK = (args) => {
    const web = (0, tron_web_1.tronWeb)();
    const txService = (0, tron_tx_1.tronTx)({ tronWeb: web });
    const virtualAccount = (0, tron_virtualAccount_1.virtualAccountService)({ blockchain, tronWeb: web });
    const abstractSdk = (0, shared_blockchain_abstract_1.abstractBlockchainSdk)(Object.assign(Object.assign({}, args), { blockchain }));
    const { nft, storage } = (0, shared_abstract_sdk_1.abstractSdkNft)();
    const { getNFTTransaction, getNFTAccountBalance, getNFTMetadataURI } = nft;
    return Object.assign(Object.assign({}, abstractSdk), { transaction: txService.native, trc10: txService.trc10, trc20: txService.trc20, kms: (0, tron_kms_1.tronKmsService)({ blockchain }), nft: Object.assign(Object.assign({}, txService.trc721), { getNFTTransaction,
            getNFTAccountBalance,
            getNFTMetadataURI }), storage, smartContract: txService.smartContract, custodial: txService.custodial, wallet: (0, tron_wallet_1.tronWallet)({ tronWeb: web }), tronWeb: web, record: (0, tron_record_1.tronRecord)(), blockchain: {
            broadcast: api_client_1.TronService.tronBroadcast,
            getCurrentBlock: api_client_1.TronService.tronGetCurrentBlock,
            getBlock: api_client_1.TronService.tronGetBlock,
            getTrc10Detail: api_client_1.TronService.tronTrc10Detail,
            getAccount: api_client_1.TronService.tronGetAccount,
            getTransaction: api_client_1.TronService.tronGetTransaction,
            smartContractGetAddress: api_client_1.BlockchainUtilsService.scGetContractAddress,
            getTransactions: api_client_1.TronService.tronAccountTx,
            getTrc20Transactions: api_client_1.TronService.tronAccountTx20,
        }, virtualAccount });
};
exports.TatumTronSDK = TatumTronSDK;
//# sourceMappingURL=tron.sdk.js.map