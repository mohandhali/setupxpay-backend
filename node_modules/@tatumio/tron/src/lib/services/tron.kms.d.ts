import { PendingTransaction } from '@tatumio/api-client';
import { Blockchain } from '@tatumio/shared-core';
export declare const tronKmsService: (args: {
    blockchain: Blockchain;
}) => {
    /**
     * Sign pending transaction from Tatum KMS
     * @param tx pending transaction from KMS
     * @param fromPrivateKey private key to sign transaction with.
     * @param provider url of the blockchain server to connect to. If not set, default public server will be used.
     * @returns transaction data to be broadcast to blockchain.
     */
    sign(tx: PendingTransaction, fromPrivateKey: string, provider?: string): Promise<string>;
    getAllPending(signatures?: string): import("@tatumio/api-client").CancelablePromise<PendingTransaction[]>;
    get: typeof import("@tatumio/api-client").KeyManagementSystemService.getPendingTransactionToSign;
    complete: typeof import("@tatumio/api-client").KeyManagementSystemService.completePendingSignature;
    delete: typeof import("@tatumio/api-client").KeyManagementSystemService.deletePendingTransactionToSign;
};
