import { TransferCustodialWalletBatchTron, TransferCustodialWalletTron } from '@tatumio/api-client';
import { ITronWeb } from './tron.web';
import { FromPrivateKeyOrSignatureIdTron } from '@tatumio/shared-blockchain-abstract';
import { TronGenerateCustodialWallet } from './tron.tx';
import { WithoutChain } from '@tatumio/shared-abstract-sdk';
declare type TronTransferCustodial = WithoutChain<FromPrivateKeyOrSignatureIdTron<TransferCustodialWalletTron>>;
declare type TronTransferBatchCustodial = WithoutChain<FromPrivateKeyOrSignatureIdTron<TransferCustodialWalletBatchTron>>;
export declare const tronCustodial: (args: {
    tronWeb: ITronWeb;
}) => {
    prepare: {
        /**
         * This method is @Deprecated. Use @link{prepareCustodialWalletBatch} instead
         * Generate new smart contract based custodial wallet. This wallet is able to receive any type of assets, btu transaction costs connected to the withdrawal
         * of assets is covered by the deployer.
         * @param body request data
         * @param provider optional provider to enter. if not present, Tatum Web3 will be used.
         * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS
         */
        custodialWallet: (body: TronGenerateCustodialWallet, provider?: string) => Promise<string>;
        /**
         * Prepare signed transaction from the custodial SC wallet.
         * @param testnet chain to work with
         * @param body request data
         * @param provider optional provider to enter. if not present, Tatum Web3 will be used.
         * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS
         */
        transferFromCustodialWallet: (body: TronTransferCustodial, getContractDecimals: (contractAddress: string, provider?: string, testnet?: boolean) => Promise<number>, provider?: string, decimals?: number, testnet?: boolean) => Promise<string>;
        /**
         * Prepare signed batch transaction from the custodial SC wallet.
         * @param testnet chain to work with
         * @param body request data
         * @param provider optional provider to enter. if not present, Tatum Web3 will be used.
         * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS
         */
        batchTransferFromCustodialWallet: (body: TronTransferBatchCustodial, getContractDecimals: (contractAddress: string, provider?: string, testnet?: boolean) => Promise<number>, provider?: string, decimals?: number, testnet?: boolean) => Promise<string>;
    };
    send: {
        /**
         * Send signed transaction from the custodial SC wallet.
         * @param testnet chain to work with
         * @param body request data
         * @param provider optional provider to enter. if not present, Tatum Web3 will be used.
         * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS
         */
        transferFromCustodialWallet: (body: TronTransferCustodial, getContractDecimals: (contractAddress: string, provider?: string, testnet?: boolean) => Promise<number>, provider?: string, decimals?: number, testnet?: boolean) => Promise<import("@tatumio/api-client").SignatureId | import("@tatumio/api-client").TransactionHash>;
        /**
         * Send signed batch transaction from the custodial SC wallet.
         * @param testnet chain to work with
         * @param body request data
         * @param provider optional provider to enter. if not present, Tatum Web3 will be used.
         * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS
         */
        batchTransferFromCustodialWallet: (body: TronTransferBatchCustodial, getContractDecimals: (contractAddress: string, provider?: string, testnet?: boolean) => Promise<number>, provider?: string, decimals?: number, testnet?: boolean) => Promise<import("@tatumio/api-client").SignatureId | import("@tatumio/api-client").TransactionHash>;
    };
};
export {};
