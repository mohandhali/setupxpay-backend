import { TronWallet, Wallet } from '@tatumio/api-client';
import { ITronWeb } from './tron.web';
export declare const tronWallet: (args: {
    tronWeb: ITronWeb;
}) => {
    /**
     * Generate Tron wallet
     * @returns mnemonic for the wallet
     */
    generateBlockchainWallet: (mnem: string) => Promise<TronWallet>;
    /**
     * Generate wallet
     * @param mnemonic optional mnemonic seed to use. If not present, new one will be generated
     * @returns wallet or a combination of address and private key
     */
    generateWallet(mnemonic?: string): Promise<Wallet>;
    /**
     * Generate address
     * @param xpub extended public key to generate address from
     * @param i derivation index of address to generate. Up to 2^31 addresses can be generated.
     * @returns blockchain address
     */
    generateAddressFromXPub(xpub: string, i: number): string;
    /**
     * Generate private key from mnemonic seed
     * @param mnemonic mnemonic to generate private key from
     * @param i derivation index of private key to generate.
     * @returns blockchain private key to the address
     */
    generatePrivateKeyFromMnemonic(mnemonic: string, i: number): Promise<string>;
    /**
     * Generate address from private key
     * @param privateKey private key to use
     * @returns blockchain private key to the address
     */
    generateAddressFromPrivatekey(privateKey: string): string;
    custodial: {
        prepare: {
            custodialWallet: (body: import("./tron.tx").TronGenerateCustodialWallet, provider?: string) => Promise<string>;
            transferFromCustodialWallet: (body: {
                fromPrivateKey?: string;
                tokenId?: string;
                amount?: string;
                recipient: string;
                signatureId?: string;
                index?: number;
                account?: string;
                from?: string;
                tokenAddress?: string;
                feeLimit: number;
                custodialAddress: string;
                contractType: 0 | 1 | 3;
            }, getContractDecimals: (contractAddress: string, provider?: string, testnet?: boolean) => Promise<number>, provider?: string, decimals?: number, testnet?: boolean) => Promise<string>;
            batchTransferFromCustodialWallet: (body: {
                fromPrivateKey?: string;
                tokenId: string[];
                amount: string[];
                recipient: string[];
                signatureId?: string;
                index?: number;
                account?: string;
                from?: string;
                tokenAddress: string[];
                feeLimit: number;
                custodialAddress: string;
                contractType: (0 | 1 | 3)[];
            }, getContractDecimals: (contractAddress: string, provider?: string, testnet?: boolean) => Promise<number>, provider?: string, decimals?: number, testnet?: boolean) => Promise<string>;
        };
        send: {
            transferFromCustodialWallet: (body: {
                fromPrivateKey?: string;
                tokenId?: string;
                amount?: string;
                recipient: string;
                signatureId?: string;
                index?: number;
                account?: string;
                from?: string;
                tokenAddress?: string;
                feeLimit: number;
                custodialAddress: string;
                contractType: 0 | 1 | 3;
            }, getContractDecimals: (contractAddress: string, provider?: string, testnet?: boolean) => Promise<number>, provider?: string, decimals?: number, testnet?: boolean) => Promise<import("@tatumio/api-client").SignatureId | import("@tatumio/api-client").TransactionHash>;
            batchTransferFromCustodialWallet: (body: {
                fromPrivateKey?: string;
                tokenId: string[];
                amount: string[];
                recipient: string[];
                signatureId?: string;
                index?: number;
                account?: string;
                from?: string;
                tokenAddress: string[];
                feeLimit: number;
                custodialAddress: string;
                contractType: (0 | 1 | 3)[];
            }, getContractDecimals: (contractAddress: string, provider?: string, testnet?: boolean) => Promise<number>, provider?: string, decimals?: number, testnet?: boolean) => Promise<import("@tatumio/api-client").SignatureId | import("@tatumio/api-client").TransactionHash>;
        };
    };
    gasPump: {
        prepare: {
            gasPumpBatch: (testnet: boolean, body: any, provider?: string) => Promise<string>;
        };
    };
};
