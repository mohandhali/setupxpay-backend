import { BurnNftTron, DeployNftTron, MintMultipleNftTron, MintNftTron, TransferNftTron } from '@tatumio/api-client';
import { WithoutChain } from '@tatumio/shared-abstract-sdk';
import { FromPrivateKeyOrSignatureIdTron } from '@tatumio/shared-blockchain-abstract';
import { ITronWeb } from './tron.web';
declare type DeployTronNft = WithoutChain<FromPrivateKeyOrSignatureIdTron<DeployNftTron>>;
declare type MintTronNft = WithoutChain<FromPrivateKeyOrSignatureIdTron<MintNftTron>>;
declare type TransferTronNft = WithoutChain<FromPrivateKeyOrSignatureIdTron<TransferNftTron>>;
declare type BurnTronNft = WithoutChain<FromPrivateKeyOrSignatureIdTron<BurnNftTron>>;
declare type MintTronMultipleNft = WithoutChain<FromPrivateKeyOrSignatureIdTron<MintMultipleNftTron>>;
export declare const tronTrc721: (args: {
    tronWeb: ITronWeb;
}) => {
    prepare: {
        /**
         * Sign Tron deploy trc721 transaction with private keys locally. Nothing is broadcast to the blockchain.
         * @param body content of the transaction to broadcast
         * @param provider
         * @returns transaction data to be broadcast to blockchain.
         */
        deploySignedTransaction: (body: DeployTronNft, provider?: string) => Promise<string>;
        /**
         * Sign Tron deploy trc721 transaction with private keys locally. Nothing is broadcast to the blockchain.
         * @param body content of the transaction to broadcast
         * @param provider
         * @returns transaction data to be broadcast to blockchain.
         */
        mintSignedTransaction: (body: MintTronNft, provider?: string) => Promise<string>;
        /**
         * Sign Tron transfer trc721 transaction with private keys locally. Nothing is broadcast to the blockchain.
         * @param body content of the transaction to broadcast
         * @param provider
         * @returns transaction data to be broadcast to blockchain.
         */
        transferSignedTransaction: (body: TransferTronNft, provider?: string) => Promise<string>;
        /**
         * Sign Tron burn trc721 transaction with private keys locally. Nothing is broadcast to the blockchain.
         * @param body content of the transaction to broadcast
         * @param provider
         * @returns transaction data to be broadcast to blockchain.
         */
        burnSignedTransaction: (body: BurnTronNft, provider?: string) => Promise<string>;
        /**
         * Sign Tron mint multiple trc721 transaction with private keys locally. Nothing is broadcast to the blockchain.
         * @param body content of the transaction to broadcast
         * @param provider
         * @returns transaction data to be broadcast to blockchain.
         */
        mintMultipleSignedTransaction: (body: MintTronMultipleNft, provider?: string) => Promise<string>;
    };
    send: {
        /**
         * Send Tron deploy trc721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
         * This operation is irreversible.
         * @param body content of the transaction to broadcast
         * @returns transaction id of the transaction in the blockchain
         */
        deploySignedTransaction: (body: DeployTronNft, provider?: string) => Promise<import("@tatumio/api-client").SignatureId | import("@tatumio/api-client").TransactionHash>;
        /**
         * Send Tron mint cashback trc721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
         * This operation is irreversible.
         * @param body content of the transaction to broadcast
         * @returns transaction id of the transaction in the blockchain
         */
        mintSignedTransaction: (body: MintTronNft, provider?: string) => Promise<import("@tatumio/api-client").SignatureId | import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").FlowMintedResult | import("@tatumio/api-client").SolanaMintedResult | import("@tatumio/api-client").AlgorandMintedResult>;
        /**
         * Send Tron transfer trc721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
         * This operation is irreversible.
         * @param body content of the transaction to broadcast
         * @returns transaction id of the transaction in the blockchain
         */
        transferSignedTransaction: (body: TransferTronNft, provider?: string) => Promise<import("@tatumio/api-client").SignatureId | import("@tatumio/api-client").TransactionHash>;
        /**
         * Send Tron burn trc721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
         * This operation is irreversible.
         * @param body content of the transaction to broadcast
         * @returns transaction id of the transaction in the blockchain
         */
        burnSignedTransaction: (body: BurnTronNft, provider?: string) => Promise<import("@tatumio/api-client").SignatureId | import("@tatumio/api-client").TransactionHash>;
        /**
         * Send Tron mint multiple trc721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
         * This operation is irreversible.
         * @param body content of the transaction to broadcast
         * @returns transaction id of the transaction in the blockchain
         */
        mintMultipleSignedTransaction: (body: MintTronMultipleNft, provider?: string) => Promise<import("@tatumio/api-client").SignatureId | import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").FlowMintedMultipleResult>;
    };
};
export {};
