import { CreateTronTrc10Blockchain, TransferTronTrc10Blockchain } from '@tatumio/api-client';
import { FromPrivateKeyOrSignatureIdTron } from '@tatumio/shared-blockchain-abstract';
import { ITronWeb } from './tron.web';
declare type TronTransferTrc10 = FromPrivateKeyOrSignatureIdTron<TransferTronTrc10Blockchain>;
declare type TronCreateTrc10 = FromPrivateKeyOrSignatureIdTron<CreateTronTrc10Blockchain>;
export declare const tronTrc10: (args: {
    tronWeb: ITronWeb;
}) => {
    prepare: {
        /**
         * Sign Tron TRC10 transaction with private keys locally. Nothing is broadcast to the blockchain.
         * @param testnet mainnet or testnet version
         * @param body content of the transaction to broadcast
         * @param precision
         * @returns transaction data to be broadcast to blockchain.
         */
        signedTransaction: (body: TronTransferTrc10, precision?: number, provider?: string) => Promise<string>;
        /**
         * Sign create Tron TRC10 transaction with private keys locally. Nothing is broadcast to the blockchain.
         * @param body content of the transaction to broadcast
         * @returns transaction data to be broadcast to blockchain.
         */
        createSignedTransaction: (body: TronCreateTrc10, provider?: string) => Promise<string>;
    };
    send: {
        /**
         * Send Tron TRC10 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
         * This operation is irreversible.
         * @param testnet mainnet or testnet version
         * @param body content of the transaction to broadcast
         * @returns transaction id of the transaction in the blockchain
         */
        signedTransaction: (body: TronTransferTrc10, precision?: number, provider?: string) => Promise<import("@tatumio/api-client").SignatureId | import("@tatumio/api-client").TransactionHash>;
        /**
         * Create Tron TRC10 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
         * This operation is irreversible.
         * @param body content of the transaction to broadcast
         * @returns transaction id of the transaction in the blockchain
         */
        createSignedTransaction: (body: TronCreateTrc10, provider?: string) => Promise<import("@tatumio/api-client").SignatureId | import("@tatumio/api-client").TransactionHash>;
    };
};
export {};
