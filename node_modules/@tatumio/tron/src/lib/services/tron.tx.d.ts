import { CallSmartContractMethod, FreezeTron, GenerateCustodialWalletTron, TransferTronBlockchain } from '@tatumio/api-client';
import { WithoutChain } from '@tatumio/shared-abstract-sdk';
import { FromPrivateKeyOrSignatureIdTron } from '@tatumio/shared-blockchain-abstract';
import { ITronWeb } from './tron.web';
export declare type CallSmartContract = FromPrivateKeyOrSignatureIdTron<CallSmartContractMethod>;
export declare type TronGenerateCustodialWallet = WithoutChain<FromPrivateKeyOrSignatureIdTron<GenerateCustodialWalletTron>>;
declare type TronTransfer = FromPrivateKeyOrSignatureIdTron<TransferTronBlockchain>;
declare type TronFreeze = FromPrivateKeyOrSignatureIdTron<FreezeTron>;
export declare const tronTx: (args: {
    tronWeb: ITronWeb;
}) => {
    trc10: {
        prepare: {
            signedTransaction: (body: Omit<import("@tatumio/api-client").TransferTronTrc10Blockchain, "fromPrivateKey"> & Partial<import("@tatumio/api-client").SignatureId & {
                index: number;
                account: string;
                from: string;
            }> & Partial<Pick<import("@tatumio/api-client").TransferTronTrc10Blockchain, "fromPrivateKey">>, precision?: number, provider?: string) => Promise<string>;
            createSignedTransaction: (body: Omit<import("@tatumio/api-client").CreateTronTrc10Blockchain, "fromPrivateKey"> & Partial<import("@tatumio/api-client").SignatureId & {
                index: number;
                account: string;
                from: string;
            }> & Partial<Pick<import("@tatumio/api-client").CreateTronTrc10Blockchain, "fromPrivateKey">>, provider?: string) => Promise<string>;
        };
        send: {
            signedTransaction: (body: Omit<import("@tatumio/api-client").TransferTronTrc10Blockchain, "fromPrivateKey"> & Partial<import("@tatumio/api-client").SignatureId & {
                index: number;
                account: string;
                from: string;
            }> & Partial<Pick<import("@tatumio/api-client").TransferTronTrc10Blockchain, "fromPrivateKey">>, precision?: number, provider?: string) => Promise<import("@tatumio/api-client").SignatureId | import("@tatumio/api-client").TransactionHash>;
            createSignedTransaction: (body: Omit<import("@tatumio/api-client").CreateTronTrc10Blockchain, "fromPrivateKey"> & Partial<import("@tatumio/api-client").SignatureId & {
                index: number;
                account: string;
                from: string;
            }> & Partial<Pick<import("@tatumio/api-client").CreateTronTrc10Blockchain, "fromPrivateKey">>, provider?: string) => Promise<import("@tatumio/api-client").SignatureId | import("@tatumio/api-client").TransactionHash>;
        };
    };
    trc20: {
        getAccountTrc20Address: (address: string, contractAddress: string, provider?: string) => Promise<any>;
        getTrc20ContractDecimals: (contractAddress: string, provider?: string) => Promise<any>;
        prepare: {
            signedTransaction: (body: Omit<import("@tatumio/api-client").TransferTronTrc20Blockchain, "fromPrivateKey"> & Partial<import("@tatumio/api-client").SignatureId & {
                index: number;
                account: string;
                from: string;
            }> & Partial<Pick<import("@tatumio/api-client").TransferTronTrc20Blockchain, "fromPrivateKey">>, provider?: string) => Promise<string>;
            createSignedTransaction: (body: Omit<import("@tatumio/api-client").CreateTronTrc20Blockchain, "fromPrivateKey"> & Partial<import("@tatumio/api-client").SignatureId & {
                index: number;
                account: string;
                from: string;
            }> & Partial<Pick<import("@tatumio/api-client").CreateTronTrc20Blockchain, "fromPrivateKey">>, provider?: string) => Promise<string>;
        };
        send: {
            signedTransaction: (body: Omit<import("@tatumio/api-client").TransferTronTrc20Blockchain, "fromPrivateKey"> & Partial<import("@tatumio/api-client").SignatureId & {
                index: number;
                account: string;
                from: string;
            }> & Partial<Pick<import("@tatumio/api-client").TransferTronTrc20Blockchain, "fromPrivateKey">>, provider?: string) => Promise<import("@tatumio/api-client").SignatureId | import("@tatumio/api-client").TransactionHash>;
            createSignedTransaction: (body: Omit<import("@tatumio/api-client").CreateTronTrc20Blockchain, "fromPrivateKey"> & Partial<import("@tatumio/api-client").SignatureId & {
                index: number;
                account: string;
                from: string;
            }> & Partial<Pick<import("@tatumio/api-client").CreateTronTrc20Blockchain, "fromPrivateKey">>, provider?: string) => Promise<import("@tatumio/api-client").SignatureId | import("@tatumio/api-client").TransactionHash>;
        };
    };
    trc721: {
        prepare: {
            deploySignedTransaction: (body: {
                symbol: string;
                fromPrivateKey?: string;
                name: string;
                signatureId?: string;
                index?: number;
                account?: string;
                from?: string;
                feeLimit: number;
            }, provider?: string) => Promise<string>;
            mintSignedTransaction: (body: {
                fromPrivateKey?: string;
                to: string;
                tokenId: string;
                url: string;
                signatureId?: string;
                index?: number;
                account?: string;
                from?: string;
                feeLimit: number;
                contractAddress: string;
            }, provider?: string) => Promise<string>;
            transferSignedTransaction: (body: {
                fromPrivateKey?: string;
                to: string;
                tokenId: string;
                signatureId?: string;
                index?: number;
                account?: string;
                from?: string;
                feeLimit: number;
                contractAddress: string;
            }, provider?: string) => Promise<string>;
            burnSignedTransaction: (body: {
                fromPrivateKey?: string;
                tokenId: string;
                signatureId?: string;
                index?: number;
                account?: string;
                from?: string;
                feeLimit: number;
                contractAddress: string;
            }, provider?: string) => Promise<string>;
            mintMultipleSignedTransaction: (body: {
                fromPrivateKey?: string;
                to: string[];
                tokenId: string[];
                url: string[];
                signatureId?: string;
                index?: number;
                account?: string;
                from?: string;
                feeLimit: number;
                contractAddress: string;
            }, provider?: string) => Promise<string>;
        };
        send: {
            deploySignedTransaction: (body: {
                symbol: string;
                fromPrivateKey?: string;
                name: string;
                signatureId?: string;
                index?: number;
                account?: string;
                from?: string;
                feeLimit: number;
            }, provider?: string) => Promise<import("@tatumio/api-client").SignatureId | import("@tatumio/api-client").TransactionHash>;
            mintSignedTransaction: (body: {
                fromPrivateKey?: string;
                to: string;
                tokenId: string;
                url: string;
                signatureId?: string;
                index?: number;
                account?: string;
                from?: string;
                feeLimit: number;
                contractAddress: string;
            }, provider?: string) => Promise<import("@tatumio/api-client").SignatureId | import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").FlowMintedResult | import("@tatumio/api-client").SolanaMintedResult | import("@tatumio/api-client").AlgorandMintedResult>;
            transferSignedTransaction: (body: {
                fromPrivateKey?: string;
                to: string;
                tokenId: string;
                signatureId?: string;
                index?: number;
                account?: string;
                from?: string;
                feeLimit: number;
                contractAddress: string;
            }, provider?: string) => Promise<import("@tatumio/api-client").SignatureId | import("@tatumio/api-client").TransactionHash>;
            burnSignedTransaction: (body: {
                fromPrivateKey?: string;
                tokenId: string;
                signatureId?: string;
                index?: number;
                account?: string;
                from?: string;
                feeLimit: number;
                contractAddress: string;
            }, provider?: string) => Promise<import("@tatumio/api-client").SignatureId | import("@tatumio/api-client").TransactionHash>;
            mintMultipleSignedTransaction: (body: {
                fromPrivateKey?: string;
                to: string[];
                tokenId: string[];
                url: string[];
                signatureId?: string;
                index?: number;
                account?: string;
                from?: string;
                feeLimit: number;
                contractAddress: string;
            }, provider?: string) => Promise<import("@tatumio/api-client").SignatureId | import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").FlowMintedMultipleResult>;
        };
    };
    native: {
        prepare: {
            /**
             * Sign Tron transaction with private keys locally. Nothing is broadcast to the blockchain.
             * @param body content of the transaction to broadcast
             * @param provider
             * @returns transaction data to be broadcast to blockchain.
             */
            signedTransaction: (body: TronTransfer, provider?: string) => Promise<string>;
            /**
             * Sign Tron Freeze balance V2 transaction with private keys locally. Nothing is broadcast to the blockchain.
             * @param body content of the transaction to broadcast
             * @param provider optional provider to enter. if not present, Tatum provider will be used.
             * @returns transaction data to be broadcast to blockchain.
             */
            freezeTransaction: (body: TronFreeze, provider?: string) => Promise<string>;
            unfreezeTransaction: (body: TronFreeze, provider?: string) => Promise<string>;
        };
        send: {
            /**
             * Send Tron transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
             * This operation is irreversible.
             * @param body content of the transaction to broadcast
             * @param provider optional provider to enter. if not present, Tatum provider will be used.
             * @returns transaction id of the transaction in the blockchain
             */
            signedTransaction: (body: TronTransfer, provider?: string) => Promise<import("@tatumio/api-client").SignatureId | import("@tatumio/api-client").TransactionHash>;
            /**
             * Send Tron Unfreeze balance V2 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
             * This operation is irreversible.
             * @param body content of the transaction to broadcast
             * @param provider
             * @returns transaction id of the transaction in the blockchain
             */
            freezeTransaction: (body: TronFreeze, provider?: string) => Promise<import("@tatumio/api-client").SignatureId | import("@tatumio/api-client").TransactionHash>;
            unfreezeTransaction: (body: TronFreeze, provider?: string) => Promise<import("@tatumio/api-client").SignatureId | import("@tatumio/api-client").TransactionHash>;
        };
    };
    smartContract: {
        prepare: {
            /**
             * Sign Tron custodial transfer transaction with private keys locally. Nothing is broadcast to the blockchain.
             * @param body content of the transaction to broadcast
             * @param provider
             * @returns transaction data to be broadcast to blockchain.
             */
            smartContractInvocation: (body: CallSmartContract, provider?: string) => Promise<string>;
        };
    };
    custodial: {
        prepare: {
            /**
             * Sign Tron custodial transfer batch transaction with private keys locally. Nothing is broadcast to the blockchain.
             * @param body content of the transaction to broadcast
             * @param provider
             * @returns transaction data to be broadcast to blockchain.
             */
            custodialTransferBatch: (body: CallSmartContract, provider?: string) => Promise<string>;
            /**
             * Sign Tron generate custodial wallet transaction with private keys locally. Nothing is broadcast to the blockchain.
             * @param body content of the transaction to broadcast
             * @param provider
             * @returns transaction data to be broadcast to blockchain.
             */
            generateCustodialWalletSignedTransaction: (body: TronGenerateCustodialWallet, provider?: string) => Promise<string>;
        };
    };
    gasPump: {
        prepare: {
            prepareGasPumpBatch: (testnet: boolean, body: any, provider?: string) => Promise<string>;
        };
    };
};
export {};
