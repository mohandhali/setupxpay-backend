import { TransferTron } from '@tatumio/api-client';
import { FromPrivateKeyOrSignatureId } from '@tatumio/shared-blockchain-abstract';
import { Blockchain } from '@tatumio/shared-core';
import { ITronWeb } from './tron.web';
export declare enum TrcType {
    TRC10 = "TRC10",
    TRC20 = "TRC20"
}
declare type TransferVirtualAccountTron = FromPrivateKeyOrSignatureId<TransferTron>;
declare type VirtualAccountResponse = {
    id?: string;
    txId?: string;
    completed?: boolean;
} | void;
export declare const virtualAccountService: (args: {
    blockchain: Blockchain;
    tronWeb: ITronWeb;
}) => {
    /**
     * Send Tron transaction from Tatum Ledger account to the blockchain. This method broadcasts signed transaction to the blockchain.
     * This operation is irreversible.
     * @param body content of the transaction to broadcast
     * @returns transaction id of the transaction in the blockchain or id of the withdrawal, if it was not cancelled automatically
     */
    send: (body: TransferVirtualAccountTron) => Promise<VirtualAccountResponse | import("@tatumio/api-client").OffchainTransactionSignatureResult>;
    depositAddress: {
        checkExists: (address: string, index?: number) => Promise<any>;
        create: any;
        createMultiple: any;
        assign: any;
        remove: any;
        getByAccount: any;
    };
    withdrawal: {
        getAll: (status?: "InProgress" | "Done" | "Cancelled", pageSize?: number, offset?: number) => Promise<any[]>;
        broadcast: any;
        create: any;
        complete: any;
    };
    storeTokenAddress: any;
};
export {};
