import { CreateTronTrc20Blockchain, TransferTronTrc20Blockchain } from '@tatumio/api-client';
import { ITronWeb } from './tron.web';
import { FromPrivateKeyOrSignatureIdTron } from '@tatumio/shared-blockchain-abstract';
declare type TransferTronTrc20 = FromPrivateKeyOrSignatureIdTron<TransferTronTrc20Blockchain>;
declare type CreateTronTrc20 = FromPrivateKeyOrSignatureIdTron<CreateTronTrc20Blockchain>;
export declare const tronTrc20: (args: {
    tronWeb: ITronWeb;
}) => {
    /**
     * Get TRC20 balance for the given tron address.
     * @param address the address whose balance is returned
     * @param contractAddress the TRC20 contract address
     * @param provider
     */
    getAccountTrc20Address: (address: string, contractAddress: string, provider?: string) => Promise<any>;
    getTrc20ContractDecimals: (contractAddress: string, provider?: string) => Promise<any>;
    prepare: {
        /**
         * Sign create Tron TRC20 transaction with private keys locally. Nothing is broadcast to the blockchain.
         * @param body content of the transaction to broadcast
         * @returns transaction data to be broadcast to blockchain.
         */
        signedTransaction: (body: TransferTronTrc20, provider?: string) => Promise<string>;
        /**
         * Prepare create Tron TRC20 transaction for KMS. Nothing is broadcast to the blockchain.
         * @param body content of the transaction to broadcast
         * @param provider
         * @returns transaction data to be broadcast to blockchain.
         */
        createSignedTransaction: (body: CreateTronTrc20, provider?: string) => Promise<string>;
    };
    send: {
        /**
         * Send Tron TRC20 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
         * This operation is irreversible.
         * @param body content of the transaction to broadcast
         * @returns transaction id of the transaction in the blockchain
         */
        signedTransaction: (body: TransferTronTrc20, provider?: string) => Promise<import("@tatumio/api-client").SignatureId | import("@tatumio/api-client").TransactionHash>;
        /**
         * Create Tron TRC20 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
         * This operation is irreversible.
         * @param body content of the transaction to broadcast
         * @returns transaction id of the transaction in the blockchain
         */
        createSignedTransaction: (body: CreateTronTrc20, provider?: string) => Promise<import("@tatumio/api-client").SignatureId | import("@tatumio/api-client").TransactionHash>;
    };
};
export {};
