import { BlockchainUtilsService, TronService } from '@tatumio/api-client';
import { SDKArguments } from '@tatumio/shared-abstract-sdk';
export declare const TatumTronSDK: (args: SDKArguments) => {
    transaction: {
        prepare: {
            signedTransaction: (body: Omit<import("@tatumio/api-client").TransferTronBlockchain, "fromPrivateKey"> & Partial<import("@tatumio/api-client").SignatureId & {
                index: number;
                account: string;
                from: string;
            }> & Partial<Pick<import("@tatumio/api-client").TransferTronBlockchain, "fromPrivateKey">>, provider?: string) => Promise<string>;
            freezeTransaction: (body: Omit<import("@tatumio/api-client").FreezeTron, "fromPrivateKey"> & Partial<import("@tatumio/api-client").SignatureId & {
                index: number;
                account: string;
                from: string;
            }> & Partial<Pick<import("@tatumio/api-client").FreezeTron, "fromPrivateKey">>, provider?: string) => Promise<string>;
            unfreezeTransaction: (body: Omit<import("@tatumio/api-client").FreezeTron, "fromPrivateKey"> & Partial<import("@tatumio/api-client").SignatureId & {
                index: number;
                account: string;
                from: string;
            }> & Partial<Pick<import("@tatumio/api-client").FreezeTron, "fromPrivateKey">>, provider?: string) => Promise<string>;
        };
        send: {
            signedTransaction: (body: Omit<import("@tatumio/api-client").TransferTronBlockchain, "fromPrivateKey"> & Partial<import("@tatumio/api-client").SignatureId & {
                index: number;
                account: string;
                from: string;
            }> & Partial<Pick<import("@tatumio/api-client").TransferTronBlockchain, "fromPrivateKey">>, provider?: string) => Promise<import("@tatumio/api-client").SignatureId | import("@tatumio/api-client").TransactionHash>;
            freezeTransaction: (body: Omit<import("@tatumio/api-client").FreezeTron, "fromPrivateKey"> & Partial<import("@tatumio/api-client").SignatureId & {
                index: number;
                account: string;
                from: string;
            }> & Partial<Pick<import("@tatumio/api-client").FreezeTron, "fromPrivateKey">>, provider?: string) => Promise<import("@tatumio/api-client").SignatureId | import("@tatumio/api-client").TransactionHash>;
            unfreezeTransaction: (body: Omit<import("@tatumio/api-client").FreezeTron, "fromPrivateKey"> & Partial<import("@tatumio/api-client").SignatureId & {
                index: number;
                account: string;
                from: string;
            }> & Partial<Pick<import("@tatumio/api-client").FreezeTron, "fromPrivateKey">>, provider?: string) => Promise<import("@tatumio/api-client").SignatureId | import("@tatumio/api-client").TransactionHash>;
        };
    };
    trc10: {
        prepare: {
            signedTransaction: (body: Omit<import("@tatumio/api-client").TransferTronTrc10Blockchain, "fromPrivateKey"> & Partial<import("@tatumio/api-client").SignatureId & {
                index: number;
                account: string;
                from: string;
            }> & Partial<Pick<import("@tatumio/api-client").TransferTronTrc10Blockchain, "fromPrivateKey">>, precision?: number, provider?: string) => Promise<string>;
            createSignedTransaction: (body: Omit<import("@tatumio/api-client").CreateTronTrc10Blockchain, "fromPrivateKey"> & Partial<import("@tatumio/api-client").SignatureId & {
                index: number;
                account: string;
                from: string;
            }> & Partial<Pick<import("@tatumio/api-client").CreateTronTrc10Blockchain, "fromPrivateKey">>, provider?: string) => Promise<string>;
        };
        send: {
            signedTransaction: (body: Omit<import("@tatumio/api-client").TransferTronTrc10Blockchain, "fromPrivateKey"> & Partial<import("@tatumio/api-client").SignatureId & {
                index: number;
                account: string;
                from: string;
            }> & Partial<Pick<import("@tatumio/api-client").TransferTronTrc10Blockchain, "fromPrivateKey">>, precision?: number, provider?: string) => Promise<import("@tatumio/api-client").SignatureId | import("@tatumio/api-client").TransactionHash>;
            createSignedTransaction: (body: Omit<import("@tatumio/api-client").CreateTronTrc10Blockchain, "fromPrivateKey"> & Partial<import("@tatumio/api-client").SignatureId & {
                index: number;
                account: string;
                from: string;
            }> & Partial<Pick<import("@tatumio/api-client").CreateTronTrc10Blockchain, "fromPrivateKey">>, provider?: string) => Promise<import("@tatumio/api-client").SignatureId | import("@tatumio/api-client").TransactionHash>;
        };
    };
    trc20: {
        getAccountTrc20Address: (address: string, contractAddress: string, provider?: string) => Promise<any>;
        getTrc20ContractDecimals: (contractAddress: string, provider?: string) => Promise<any>;
        prepare: {
            signedTransaction: (body: Omit<import("@tatumio/api-client").TransferTronTrc20Blockchain, "fromPrivateKey"> & Partial<import("@tatumio/api-client").SignatureId & {
                index: number;
                account: string;
                from: string;
            }> & Partial<Pick<import("@tatumio/api-client").TransferTronTrc20Blockchain, "fromPrivateKey">>, provider?: string) => Promise<string>;
            createSignedTransaction: (body: Omit<import("@tatumio/api-client").CreateTronTrc20Blockchain, "fromPrivateKey"> & Partial<import("@tatumio/api-client").SignatureId & {
                index: number;
                account: string;
                from: string;
            }> & Partial<Pick<import("@tatumio/api-client").CreateTronTrc20Blockchain, "fromPrivateKey">>, provider?: string) => Promise<string>;
        };
        send: {
            signedTransaction: (body: Omit<import("@tatumio/api-client").TransferTronTrc20Blockchain, "fromPrivateKey"> & Partial<import("@tatumio/api-client").SignatureId & {
                index: number;
                account: string;
                from: string;
            }> & Partial<Pick<import("@tatumio/api-client").TransferTronTrc20Blockchain, "fromPrivateKey">>, provider?: string) => Promise<import("@tatumio/api-client").SignatureId | import("@tatumio/api-client").TransactionHash>;
            createSignedTransaction: (body: Omit<import("@tatumio/api-client").CreateTronTrc20Blockchain, "fromPrivateKey"> & Partial<import("@tatumio/api-client").SignatureId & {
                index: number;
                account: string;
                from: string;
            }> & Partial<Pick<import("@tatumio/api-client").CreateTronTrc20Blockchain, "fromPrivateKey">>, provider?: string) => Promise<import("@tatumio/api-client").SignatureId | import("@tatumio/api-client").TransactionHash>;
        };
    };
    kms: {
        sign(tx: import("@tatumio/api-client").PendingTransaction, fromPrivateKey: string, provider?: string): Promise<string>;
        getAllPending(signatures?: string): import("@tatumio/api-client").CancelablePromise<import("@tatumio/api-client").PendingTransaction[]>;
        get: typeof import("@tatumio/api-client").KeyManagementSystemService.getPendingTransactionToSign;
        complete: typeof import("@tatumio/api-client").KeyManagementSystemService.completePendingSignature;
        delete: typeof import("@tatumio/api-client").KeyManagementSystemService.deletePendingTransactionToSign;
    };
    nft: {
        getNFTTransaction: typeof import("@tatumio/api-client").NftErc721OrCompatibleService.nftGetTransactErc721;
        getNFTAccountBalance: typeof import("@tatumio/api-client").NftErc721OrCompatibleService.nftGetBalanceErc721;
        getNFTMetadataURI: typeof import("@tatumio/api-client").NftErc721OrCompatibleService.nftGetMetadataErc721;
        prepare: {
            deploySignedTransaction: (body: {
                symbol: string;
                fromPrivateKey?: string;
                name: string;
                signatureId?: string;
                index?: number;
                account?: string;
                from?: string;
                feeLimit: number;
            }, provider?: string) => Promise<string>;
            mintSignedTransaction: (body: {
                fromPrivateKey?: string;
                to: string;
                tokenId: string;
                url: string;
                signatureId?: string;
                index?: number;
                account?: string;
                from?: string;
                feeLimit: number;
                contractAddress: string;
            }, provider?: string) => Promise<string>;
            transferSignedTransaction: (body: {
                fromPrivateKey?: string;
                to: string;
                tokenId: string;
                signatureId?: string;
                index?: number;
                account?: string;
                from?: string;
                feeLimit: number;
                contractAddress: string;
            }, provider?: string) => Promise<string>;
            burnSignedTransaction: (body: {
                fromPrivateKey?: string;
                tokenId: string;
                signatureId?: string;
                index?: number;
                account?: string;
                from?: string;
                feeLimit: number;
                contractAddress: string;
            }, provider?: string) => Promise<string>;
            mintMultipleSignedTransaction: (body: {
                fromPrivateKey?: string;
                to: string[];
                tokenId: string[];
                url: string[];
                signatureId?: string;
                index?: number;
                account?: string;
                from?: string;
                feeLimit: number;
                contractAddress: string;
            }, provider?: string) => Promise<string>;
        };
        send: {
            deploySignedTransaction: (body: {
                symbol: string;
                fromPrivateKey?: string;
                name: string;
                signatureId?: string;
                index?: number;
                account?: string;
                from?: string;
                feeLimit: number;
            }, provider?: string) => Promise<import("@tatumio/api-client").SignatureId | import("@tatumio/api-client").TransactionHash>;
            mintSignedTransaction: (body: {
                fromPrivateKey?: string;
                to: string;
                tokenId: string;
                url: string;
                signatureId?: string;
                index?: number;
                account?: string;
                from?: string;
                feeLimit: number;
                contractAddress: string;
            }, provider?: string) => Promise<import("@tatumio/api-client").SignatureId | import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").FlowMintedResult | import("@tatumio/api-client").SolanaMintedResult | import("@tatumio/api-client").AlgorandMintedResult>;
            transferSignedTransaction: (body: {
                fromPrivateKey?: string;
                to: string;
                tokenId: string;
                signatureId?: string;
                index?: number;
                account?: string;
                from?: string;
                feeLimit: number;
                contractAddress: string;
            }, provider?: string) => Promise<import("@tatumio/api-client").SignatureId | import("@tatumio/api-client").TransactionHash>;
            burnSignedTransaction: (body: {
                fromPrivateKey?: string;
                tokenId: string;
                signatureId?: string;
                index?: number;
                account?: string;
                from?: string;
                feeLimit: number;
                contractAddress: string;
            }, provider?: string) => Promise<import("@tatumio/api-client").SignatureId | import("@tatumio/api-client").TransactionHash>;
            mintMultipleSignedTransaction: (body: {
                fromPrivateKey?: string;
                to: string[];
                tokenId: string[];
                url: string[];
                signatureId?: string;
                index?: number;
                account?: string;
                from?: string;
                feeLimit: number;
                contractAddress: string;
            }, provider?: string) => Promise<import("@tatumio/api-client").SignatureId | import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").FlowMintedMultipleResult>;
        };
    };
    storage: {
        upload: typeof import("@tatumio/api-client").IpfsService.storeIpfs;
        get: typeof import("@tatumio/api-client").IpfsService.getIpfsData;
    };
    smartContract: {
        prepare: {
            smartContractInvocation: (body: import("./services/tron.tx").CallSmartContract, provider?: string) => Promise<string>;
        };
    };
    custodial: {
        prepare: {
            custodialTransferBatch: (body: import("./services/tron.tx").CallSmartContract, provider?: string) => Promise<string>;
            generateCustodialWalletSignedTransaction: (body: import("./services/tron.tx").TronGenerateCustodialWallet, provider?: string) => Promise<string>;
        };
    };
    wallet: {
        generateBlockchainWallet: (mnem: string) => Promise<import("@tatumio/api-client").TronWallet>;
        generateWallet(mnemonic?: string): Promise<import("@tatumio/api-client").Wallet>;
        generateAddressFromXPub(xpub: string, i: number): string;
        generatePrivateKeyFromMnemonic(mnemonic: string, i: number): Promise<string>;
        generateAddressFromPrivatekey(privateKey: string): string;
        custodial: {
            prepare: {
                custodialWallet: (body: import("./services/tron.tx").TronGenerateCustodialWallet, provider?: string) => Promise<string>;
                transferFromCustodialWallet: (body: {
                    fromPrivateKey?: string;
                    tokenId?: string;
                    amount?: string;
                    recipient: string;
                    signatureId?: string;
                    index?: number;
                    account?: string;
                    from?: string;
                    tokenAddress?: string;
                    feeLimit: number;
                    custodialAddress: string;
                    contractType: 0 | 1 | 3;
                }, getContractDecimals: (contractAddress: string, provider?: string, testnet?: boolean) => Promise<number>, provider?: string, decimals?: number, testnet?: boolean) => Promise<string>;
                batchTransferFromCustodialWallet: (body: {
                    fromPrivateKey?: string;
                    tokenId: string[];
                    amount: string[];
                    recipient: string[];
                    signatureId?: string;
                    index?: number;
                    account?: string;
                    from?: string;
                    tokenAddress: string[];
                    feeLimit: number;
                    custodialAddress: string;
                    contractType: (0 | 1 | 3)[];
                }, getContractDecimals: (contractAddress: string, provider?: string, testnet?: boolean) => Promise<number>, provider?: string, decimals?: number, testnet?: boolean) => Promise<string>;
            };
            send: {
                transferFromCustodialWallet: (body: {
                    fromPrivateKey?: string;
                    tokenId?: string;
                    amount?: string;
                    recipient: string;
                    signatureId?: string;
                    index?: number;
                    account?: string;
                    from?: string;
                    tokenAddress?: string;
                    feeLimit: number;
                    custodialAddress: string;
                    contractType: 0 | 1 | 3;
                }, getContractDecimals: (contractAddress: string, provider?: string, testnet?: boolean) => Promise<number>, provider?: string, decimals?: number, testnet?: boolean) => Promise<import("@tatumio/api-client").SignatureId | import("@tatumio/api-client").TransactionHash>;
                batchTransferFromCustodialWallet: (body: {
                    fromPrivateKey?: string;
                    tokenId: string[];
                    amount: string[];
                    recipient: string[];
                    signatureId?: string;
                    index?: number;
                    account?: string;
                    from?: string;
                    tokenAddress: string[];
                    feeLimit: number;
                    custodialAddress: string;
                    contractType: (0 | 1 | 3)[];
                }, getContractDecimals: (contractAddress: string, provider?: string, testnet?: boolean) => Promise<number>, provider?: string, decimals?: number, testnet?: boolean) => Promise<import("@tatumio/api-client").SignatureId | import("@tatumio/api-client").TransactionHash>;
            };
        };
        gasPump: {
            prepare: {
                gasPumpBatch: (testnet: boolean, body: any, provider?: string) => Promise<string>;
            };
        };
    };
    tronWeb: import("./services/tron.web").ITronWeb;
    record: {
        getLog(id: string): import("@tatumio/api-client").CancelablePromise<{
            data: string;
        }>;
    };
    blockchain: {
        broadcast: typeof TronService.tronBroadcast;
        getCurrentBlock: typeof TronService.tronGetCurrentBlock;
        getBlock: typeof TronService.tronGetBlock;
        getTrc10Detail: typeof TronService.tronTrc10Detail;
        getAccount: typeof TronService.tronGetAccount;
        getTransaction: typeof TronService.tronGetTransaction;
        smartContractGetAddress: typeof BlockchainUtilsService.scGetContractAddress;
        getTransactions: typeof TronService.tronAccountTx;
        getTrc20Transactions: typeof TronService.tronAccountTx20;
    };
    virtualAccount: {
        send: (body: Omit<import("@tatumio/api-client").TransferTron, "fromPrivateKey"> & Partial<import("@tatumio/api-client").SignatureId & {
            index: number;
        }> & Partial<Pick<import("@tatumio/api-client").TransferTron, "fromPrivateKey">> & Partial<{
            mnemonic: string;
        }>) => Promise<(void | {
            id?: string;
            txId?: string;
            completed?: boolean;
        }) | import("@tatumio/api-client").OffchainTransactionSignatureResult>;
        depositAddress: {
            checkExists: (address: string, index?: number) => Promise<any>;
            create: any;
            createMultiple: any;
            assign: any;
            remove: any;
            getByAccount: any;
        };
        withdrawal: {
            getAll: (status?: "InProgress" | "Done" | "Cancelled", pageSize?: number, offset?: number) => Promise<any[]>;
            broadcast: any;
            create: any;
            complete: any;
        };
        storeTokenAddress: any;
    };
    getExchangeRate(basePair?: import("@tatumio/api-client").Fiat): import("@tatumio/api-client").CancelablePromise<import("@tatumio/api-client").ExchangeRate>;
    subscriptions: typeof import("@tatumio/api-client").NotificationSubscriptionsService;
    security: {
        checkMaliciousAddress: typeof import("@tatumio/api-client").MaliciousAddressService.checkMalicousAddress;
    };
    tatum: {
        getCredits: typeof import("@tatumio/api-client").ServiceUtilsService.getCredits;
        getVersion: typeof import("@tatumio/api-client").ServiceUtilsService.getVersion;
        freezeApiKey: typeof import("@tatumio/api-client").ServiceUtilsService.freezeApiKey;
        unfreezeApiKey: typeof import("@tatumio/api-client").ServiceUtilsService.unfreezeApiKey;
    };
    ledger: {
        customer: {
            get: typeof import("@tatumio/api-client").CustomerService.getCustomerByExternalOrInternalId;
            getAll: typeof import("@tatumio/api-client").CustomerService.findAllCustomers;
            update: typeof import("@tatumio/api-client").CustomerService.updateCustomer;
            activate: typeof import("@tatumio/api-client").CustomerService.activateCustomer;
            deactivate: typeof import("@tatumio/api-client").CustomerService.deactivateCustomer;
            enable: typeof import("@tatumio/api-client").CustomerService.enableCustomer;
            disable: typeof import("@tatumio/api-client").CustomerService.disableCustomer;
        };
        orderBook: {
            getHistorical: typeof import("@tatumio/api-client").OrderBookService.getHistoricalTradesBody;
            getActiveBuyTrades: typeof import("@tatumio/api-client").OrderBookService.getBuyTradesBody;
            getActiveSellTrades: typeof import("@tatumio/api-client").OrderBookService.getSellTradesBody;
            newTrade: typeof import("@tatumio/api-client").OrderBookService.storeTrade;
            get: typeof import("@tatumio/api-client").OrderBookService.getTradeById;
            cancel: typeof import("@tatumio/api-client").OrderBookService.deleteTrade;
            cancelByAccount: typeof import("@tatumio/api-client").OrderBookService.deleteAccountTrades;
        };
        transaction: {
            send: typeof import("@tatumio/api-client").TransactionService.sendTransaction;
            sendMultiple: typeof import("@tatumio/api-client").TransactionService.sendTransactionBatch;
            getAll: typeof import("@tatumio/api-client").TransactionService.getTransactions;
            getAllByAccount: typeof import("@tatumio/api-client").TransactionService.getTransactionsByAccountId;
            getAllByCustomer: typeof import("@tatumio/api-client").TransactionService.getTransactionsByCustomerId;
            getAllByReference: typeof import("@tatumio/api-client").TransactionService.getTransactionsByReference;
            countByAccount: (filter: import("@tatumio/api-client").TransactionFilter) => import("@tatumio/api-client").CancelablePromise<number | import("@tatumio/api-client").Transaction[]>;
            countByCustomer: (filter: import("@tatumio/api-client").TransactionFilterCustomer) => import("@tatumio/api-client").CancelablePromise<number | import("@tatumio/api-client").Transaction[]>;
        };
        virtualCurrency: {
            create: typeof import("@tatumio/api-client").VirtualCurrencyService.createCurrency;
            mint: typeof import("@tatumio/api-client").VirtualCurrencyService.mintCurrency;
            revoke: typeof import("@tatumio/api-client").VirtualCurrencyService.revokeCurrency;
            getByName: typeof import("@tatumio/api-client").VirtualCurrencyService.getCurrency;
            update: typeof import("@tatumio/api-client").VirtualCurrencyService.updateCurrency;
        };
        blockAmount: {
            block: typeof import("@tatumio/api-client").AccountService.blockAmount;
            unblock: typeof import("@tatumio/api-client").AccountService.deleteBlockAmount;
            unblockWithTransaction: typeof import("@tatumio/api-client").AccountService.unblockAmountWithTransaction;
        };
        account: {
            get: typeof import("@tatumio/api-client").AccountService.getAccountByAccountId;
            getAll: typeof import("@tatumio/api-client").AccountService.getAccounts;
            getByCustomerId: typeof import("@tatumio/api-client").AccountService.getAccountsByCustomerId;
            getBalance: typeof import("@tatumio/api-client").AccountService.getAccountBalance;
            create: typeof import("@tatumio/api-client").AccountService.createAccount;
            createMultiple: typeof import("@tatumio/api-client").AccountService.createAccountBatch;
            update: typeof import("@tatumio/api-client").AccountService.updateAccountByAccountId;
            getBlockedAmountsByAccountId: typeof import("@tatumio/api-client").AccountService.getBlockAmountById;
            activate: typeof import("@tatumio/api-client").AccountService.activateAccount;
            deactivate: typeof import("@tatumio/api-client").AccountService.deactivateAccount;
            freeze: typeof import("@tatumio/api-client").AccountService.freezeAccount;
            unfreeze: typeof import("@tatumio/api-client").AccountService.unfreezeAccount;
            generate: (account: import("@tatumio/api-client").CreateAccount & {
                xpub?: string;
            }, generateNewWalletFn: any, generateNewWallet?: boolean, testnet?: boolean, webhookUrl?: string) => Promise<any>;
        };
    };
};
