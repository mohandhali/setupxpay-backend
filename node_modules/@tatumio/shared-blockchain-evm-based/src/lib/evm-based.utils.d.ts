import { EvmBasedBlockchain } from '@tatumio/shared-core';
import { CreateRecord, Wallet } from '@tatumio/api-client';
import Web3 from 'web3';
import { TransactionConfig } from 'web3-core';
import { SdkErrorCode, WithoutChain } from '@tatumio/shared-abstract-sdk';
import { BigNumber as BN } from '@ethersproject/bignumber';
import { EvmBasedWeb3 } from './services/evm-based.web3';
export declare const evmBasedUtils: {
    generateAddressFromXPub: (xpub: string, i: number, prefix?: string) => string;
    generatePrivateKeyFromMnemonic: (blockchain: EvmBasedBlockchain, mnemonic: string, i: number, options?: {
        testnet: boolean;
    }) => Promise<string>;
    generateAddressFromPrivateKey: (blockchain: EvmBasedBlockchain, privateKey: string, prefix?: string) => string;
    generateBlockchainWallet: (blockchain: EvmBasedBlockchain, mnemonic?: string, options?: {
        testnet: boolean;
    }) => Promise<Required<Wallet>>;
    prepareSignedTransactionAbstraction: (client: Web3, transaction: TransactionConfig, web3: EvmBasedWeb3, signatureId?: string, fromPrivateKey?: string, gasLimit?: string, gasPrice?: string, provider?: string) => Promise<string>;
    estimateGasLimit: ({ client, tx, fromPrivateKey, }: {
        client: Web3;
        tx: TransactionConfig;
        fromPrivateKey?: string;
    }) => Promise<number>;
    validateErc20Balance: (client: Web3, privateKey: string, contractAddress: string, amount: string) => Promise<void>;
    validateSenderBalance: (client: Web3, privateKey: string, tx: TransactionConfig) => Promise<void>;
    transformToWei: (amount: string, unit?: string) => string;
    amountToWeiHex: (amount: string, unit?: string) => string;
    decimals: (contractAddress: string, web3: EvmBasedWeb3, provider?: string) => Promise<any>;
    gasLimitToHexWithFallback: (gasLimit?: string, fallback?: string) => string;
    gasPriceWeiToHexWithFallback: (gasPrice?: string, fallback?: BN) => string | BN;
    storeDataTransaction: (body: StoreDataTransactionBody & {
        signatureId?: string;
    }, web3: EvmBasedWeb3, provider?: string) => Promise<string>;
    tryCatch: (method: () => any, code: SdkErrorCode) => Promise<any>;
    alreadyMinted: (contract: any, tokenId: string) => Promise<boolean>;
};
export declare type StoreDataTransactionBody = WithoutChain<CreateRecord> & {
    signatureId?: string;
    gasLimit?: string;
    gasPrice?: string;
};
export declare type AddressTransformer = (address: any) => any;
export declare const AddressTransformerDefault: (address: any) => any;
