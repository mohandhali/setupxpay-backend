import { EvmBasedBlockchain } from '@tatumio/shared-core';
import { TatumUrlArg } from '@tatumio/api-client';
import { EvmBasedWeb3 } from './services/evm-based.web3';
export declare const evmBasedSdk: (args: {
    apiKey: string;
    url?: TatumUrlArg;
    blockchain: EvmBasedBlockchain;
    web3: EvmBasedWeb3;
}) => {
    web3Client: (provider?: string, fromPrivateKey?: string) => import("web3").default;
    record: {
        getLog(id: string): import("@tatumio/api-client").CancelablePromise<{
            data: string;
        }>;
        storeLog(requestBody: import("./services/evm-based.record").RequestBodyWithoutChain): import("@tatumio/api-client").CancelablePromise<import("@tatumio/api-client").TransactionHash>;
    };
    getGasPriceInWei: (provider?: string) => Promise<string>;
    wallet: {
        generateAddressFromXPub(xpub: string, i: number): string;
        generatePrivateKeyFromMnemonic(mnemonic: string, i: number, options?: {
            testnet: boolean;
        }): Promise<string>;
        generateAddressFromPrivateKey(privateKey: string): string;
        generateWallet(mnemonic?: string, options?: {
            testnet: boolean;
        }): Promise<Required<import("@tatumio/api-client").Wallet>>;
    };
    custodialManagedWallet: {
        transfer: typeof import("@tatumio/api-client").CustodialManagedWalletsService.custodialTransferManagedAddress;
        getAll: typeof import("@tatumio/api-client").CustodialManagedWalletsService.custodialGetWallets;
        create: typeof import("@tatumio/api-client").CustodialManagedWalletsService.custodialCreateWallet;
        delete: typeof import("@tatumio/api-client").CustodialManagedWalletsService.custodialDeleteWallet;
        get: typeof import("@tatumio/api-client").CustodialManagedWalletsService.custodialGetWallet;
    };
    kms: {
        getAllPending(signatures?: string): import("@tatumio/api-client").CancelablePromise<import("@tatumio/api-client").PendingTransaction[]>;
        get: typeof import("@tatumio/api-client").KeyManagementSystemService.getPendingTransactionToSign;
        complete: typeof import("@tatumio/api-client").KeyManagementSystemService.completePendingSignature;
        delete: typeof import("@tatumio/api-client").KeyManagementSystemService.deletePendingTransactionToSign;
    };
    virtualAccount: {
        depositAddress: {
            checkExists: (address: string, index?: number) => Promise<import("@tatumio/api-client").Account>;
            create: typeof import("@tatumio/api-client").BlockchainAddressesService.generateDepositAddress;
            createMultiple: typeof import("@tatumio/api-client").BlockchainAddressesService.generateDepositAddressesBatch;
            assign: typeof import("@tatumio/api-client").BlockchainAddressesService.assignAddress;
            remove: typeof import("@tatumio/api-client").BlockchainAddressesService.removeAddress;
            getByAccount: typeof import("@tatumio/api-client").BlockchainAddressesService.getAllDepositAddresses;
        };
        withdrawal: {
            getAll: (status?: "InProgress" | "Done" | "Cancelled", pageSize?: number, offset?: number) => Promise<import("@tatumio/api-client").WithdrawalObject[]>;
            broadcast: typeof import("@tatumio/api-client").WithdrawalService.broadcastBlockchainTransaction;
            create: typeof import("@tatumio/api-client").WithdrawalService.storeWithdrawal;
            complete: typeof import("@tatumio/api-client").WithdrawalService.completeWithdrawal;
        };
        storeTokenAddress: typeof import("@tatumio/api-client").BlockchainOperationsService.storeTokenAddress;
    };
    getExchangeRate(basePair?: import("@tatumio/api-client").Fiat): import("@tatumio/api-client").CancelablePromise<import("@tatumio/api-client").ExchangeRate>;
    subscriptions: typeof import("@tatumio/api-client").NotificationSubscriptionsService;
    security: {
        checkMaliciousAddress: typeof import("@tatumio/api-client").MaliciousAddressService.checkMalicousAddress;
    };
    tatum: {
        getCredits: typeof import("@tatumio/api-client").ServiceUtilsService.getCredits;
        getVersion: typeof import("@tatumio/api-client").ServiceUtilsService.getVersion;
        freezeApiKey: typeof import("@tatumio/api-client").ServiceUtilsService.freezeApiKey;
        unfreezeApiKey: typeof import("@tatumio/api-client").ServiceUtilsService.unfreezeApiKey;
    };
    ledger: {
        customer: {
            get: typeof import("@tatumio/api-client").CustomerService.getCustomerByExternalOrInternalId;
            getAll: typeof import("@tatumio/api-client").CustomerService.findAllCustomers;
            update: typeof import("@tatumio/api-client").CustomerService.updateCustomer;
            activate: typeof import("@tatumio/api-client").CustomerService.activateCustomer;
            deactivate: typeof import("@tatumio/api-client").CustomerService.deactivateCustomer;
            enable: typeof import("@tatumio/api-client").CustomerService.enableCustomer;
            disable: typeof import("@tatumio/api-client").CustomerService.disableCustomer;
        };
        orderBook: {
            getHistorical: typeof import("@tatumio/api-client").OrderBookService.getHistoricalTradesBody;
            getActiveBuyTrades: typeof import("@tatumio/api-client").OrderBookService.getBuyTradesBody;
            getActiveSellTrades: typeof import("@tatumio/api-client").OrderBookService.getSellTradesBody;
            newTrade: typeof import("@tatumio/api-client").OrderBookService.storeTrade;
            get: typeof import("@tatumio/api-client").OrderBookService.getTradeById;
            cancel: typeof import("@tatumio/api-client").OrderBookService.deleteTrade;
            cancelByAccount: typeof import("@tatumio/api-client").OrderBookService.deleteAccountTrades;
        };
        transaction: {
            send: typeof import("@tatumio/api-client").TransactionService.sendTransaction;
            sendMultiple: typeof import("@tatumio/api-client").TransactionService.sendTransactionBatch;
            getAll: typeof import("@tatumio/api-client").TransactionService.getTransactions;
            getAllByAccount: typeof import("@tatumio/api-client").TransactionService.getTransactionsByAccountId;
            getAllByCustomer: typeof import("@tatumio/api-client").TransactionService.getTransactionsByCustomerId;
            getAllByReference: typeof import("@tatumio/api-client").TransactionService.getTransactionsByReference;
            countByAccount: (filter: import("@tatumio/api-client").TransactionFilter) => import("@tatumio/api-client").CancelablePromise<number | import("@tatumio/api-client").Transaction[]>;
            countByCustomer: (filter: import("@tatumio/api-client").TransactionFilterCustomer) => import("@tatumio/api-client").CancelablePromise<number | import("@tatumio/api-client").Transaction[]>;
        };
        virtualCurrency: {
            create: typeof import("@tatumio/api-client").VirtualCurrencyService.createCurrency;
            mint: typeof import("@tatumio/api-client").VirtualCurrencyService.mintCurrency;
            revoke: typeof import("@tatumio/api-client").VirtualCurrencyService.revokeCurrency;
            getByName: typeof import("@tatumio/api-client").VirtualCurrencyService.getCurrency;
            update: typeof import("@tatumio/api-client").VirtualCurrencyService.updateCurrency;
        };
        blockAmount: {
            block: typeof import("@tatumio/api-client").AccountService.blockAmount;
            unblock: typeof import("@tatumio/api-client").AccountService.deleteBlockAmount;
            unblockWithTransaction: typeof import("@tatumio/api-client").AccountService.unblockAmountWithTransaction;
        };
        account: {
            get: typeof import("@tatumio/api-client").AccountService.getAccountByAccountId;
            getAll: typeof import("@tatumio/api-client").AccountService.getAccounts;
            getByCustomerId: typeof import("@tatumio/api-client").AccountService.getAccountsByCustomerId;
            getBalance: typeof import("@tatumio/api-client").AccountService.getAccountBalance;
            create: typeof import("@tatumio/api-client").AccountService.createAccount;
            createMultiple: typeof import("@tatumio/api-client").AccountService.createAccountBatch;
            update: typeof import("@tatumio/api-client").AccountService.updateAccountByAccountId;
            getBlockedAmountsByAccountId: typeof import("@tatumio/api-client").AccountService.getBlockAmountById;
            activate: typeof import("@tatumio/api-client").AccountService.activateAccount;
            deactivate: typeof import("@tatumio/api-client").AccountService.deactivateAccount;
            freeze: typeof import("@tatumio/api-client").AccountService.freezeAccount;
            unfreeze: typeof import("@tatumio/api-client").AccountService.unfreezeAccount;
            generate: (account: import("@tatumio/api-client").CreateAccount & {
                xpub?: string;
            }, generateNewWalletFn: any, generateNewWallet?: boolean, testnet?: boolean, webhookUrl?: string) => Promise<any>;
        };
    };
};
