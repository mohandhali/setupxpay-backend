import { BroadcastFunction, ChainSmartContractMethodInvocation } from '@tatumio/shared-blockchain-abstract';
import { TransactionConfig } from 'web3-core';
import { EvmBasedWeb3 } from '../../services/evm-based.web3';
import { AddressTransformer } from '../../evm-based.utils';
import { CallReadSmartContractMethod } from '@tatumio/api-client';
import { GasPumpChain } from '../../services/evm-based.gas.pump';
export declare type TransactionConfigWithFeeCurrency = TransactionConfig & {
    feeCurrency?: string;
};
export declare const smartContractWriteMethodInvocation: ({ body, web3, provider, chain, addressTransformer, }: {
    body: ChainSmartContractMethodInvocation;
    web3: EvmBasedWeb3;
    provider?: string;
    chain?: GasPumpChain;
    addressTransformer?: AddressTransformer;
}) => Promise<string>;
export declare const smartContractReadMethodInvocation: ({ body, web3, provider, addressTransformer, }: {
    body: CallReadSmartContractMethod;
    web3: EvmBasedWeb3;
    provider?: string;
    addressTransformer?: AddressTransformer;
}) => Promise<{
    data: any;
}>;
export declare const smartContract: ({ web3, broadcastFunction, smartContractApiMethod, addressTransformer, }: {
    web3: EvmBasedWeb3;
    broadcastFunction: BroadcastFunction;
    smartContractApiMethod: any;
    addressTransformer?: AddressTransformer;
}) => {
    prepare: {
        /**
         * Sign invoke smart contract transaction with private keys locally. Nothing is broadcast to the blockchain.
         * @param body content of the transaction to broadcast
         * @param options
         * @param options.provider optional url of the Server to connect to. If not set, default public server will be used.
         * @returns transaction data to be broadcast to blockchain.
         */
        smartContractWriteMethodInvocationTransaction: (body: ChainSmartContractMethodInvocation, provider?: string) => Promise<string>;
    };
    send: {
        /**
         * Send invoke smart contract transaction to the blockchain.
         * Invoked method only reads from blockchain the data and returns them back.
         * @param body content of the transaction to broadcast
         * @param provider url of the Server to connect to. If not set, default public server will be used.
         */
        smartContractReadMethodInvocationTransaction: (body: CallReadSmartContractMethod, provider?: string) => Promise<{
            data: any;
        }>;
        /**
         * Send invoke smart contract transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
         * This operation is irreversible.
         * @param body content of the transaction to broadcast
         * @param provider url of the Server to connect to. If not set, default public server will be used.
         * @returns transaction id of the transaction in the blockchain
         */
        smartContractMethodInvocationTransaction: (body: ChainSmartContractMethodInvocation, provider?: string) => Promise<any>;
    };
};
