"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.gasPump = void 0;
const tslib_1 = require("tslib");
const shared_abstract_sdk_1 = require("@tatumio/shared-abstract-sdk");
const evm_based_gas_pump_1 = require("../../services/evm-based.gas.pump");
const evm_based_smartContract_1 = require("../../services/evm-based.smartContract");
const contracts_1 = require("../../contracts");
const evm_based_utils_1 = require("../../evm-based.utils");
const gasPumpWalletBatch = (body, web3, testnet, provider) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const { params, methodName, bodyWithContractAddress } = yield (0, evm_based_gas_pump_1.evmBasedGasPump)().prepareGasPumpWalletBatchAbstract(body, web3, testnet);
    return yield (0, evm_based_smartContract_1.evmBasedSmartContract)(web3).helperPrepareSCCall(bodyWithContractAddress, methodName, params, provider, contracts_1.CustodialWalletFactoryV2.abi, testnet);
});
const gasPump = (args) => {
    return {
        prepare: {
            gasPumpWalletBatch: (testnet, body, provider) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                return evm_based_utils_1.evmBasedUtils.tryCatch(() => gasPumpWalletBatch(body, args.web3, testnet, provider), shared_abstract_sdk_1.SdkErrorCode.EVM_GAS_PUMP_CANNOT_PREPARE_DEPLOY_BATCH_TX);
            }),
        },
    };
};
exports.gasPump = gasPump;
//# sourceMappingURL=index.js.map