import { ApproveErc20 } from '@tatumio/api-client';
import { BroadcastFunction, ChainApproveErc20, ChainBuyAssetOnMarketplace, ChainCancelSellAssetOnMarketplace, ChainGenerateMarketplace, ChainSellAssetOnMarketplace, ChainUpdateFee, ChainUpdateFeeRecipient } from '@tatumio/shared-blockchain-abstract';
import { EvmBasedWeb3 } from '../../services/evm-based.web3';
import { AddressTransformer } from '../../evm-based.utils';
import { ApproveNftTransfer } from '../../services/evm-based.auction';
import { EvmBasedBlockchain } from '@tatumio/shared-core';
export declare const marketplace: ({ web3, broadcastFunction, blockchain, addressTransformer, }: {
    web3: EvmBasedWeb3;
    blockchain: EvmBasedBlockchain;
    broadcastFunction: BroadcastFunction;
    addressTransformer?: AddressTransformer;
}) => {
    prepare: {
        /**
         * Approve ERC20 spending for marketplace to perform buy with ERC20 token.
         * @param body request data
         * @param provider optional provider to enter. if not present, Tatum Web3 will be used.
         * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS
         */
        approveErc20Spending: (body: ApproveErc20, provider?: string) => Promise<string>;
        /**
         * Approve NFT transfer for listing.
         * @param body request data
         * @param provider optional provider to enter. if not present, Tatum Web3 will be used.
         * @returns transaction data to be broadcast to blockchain, or signatureId in case of Tatum KMS
         */
        approveSpending: (body: ApproveNftTransfer, provider?: string) => Promise<string>;
        /**
         * Prepare signed transaction for deploy new smart contract for NFT marketplace logic. Smart contract enables marketplace operator to create new listing for NFT (ERC-721/1155).
         * Operator can set a fee in percentage, which will be paid on top of the price of the asset.
         * Listing can be offered for native asset - ETH, BSC, etc. - or any ERC20 token - this is configurable during listing creation.
         * Once the listing is created, seller must send the NFT asset to the smart contract.
         * Buyer will buy the asset from the listing using native asset - send assets along the buyAssetFromListing() smart contract call, or via ERC20 token.
         * Buyer of the listing must perform approval for the smart contract to access ERC20 token, before the actual buyAssetFromListing() method is called.
         * Once both assets - from buyer and seller - are in the smart contract, NFT is sent to the buyer, price is sent to the seller
         * and marketplace fee is set to the operator.
         * @param body request data
         * @param provider optional provider to enter. if not present, Tatum Web3 will be used.
         * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS
         */
        generateMarketplace: (body: ChainGenerateMarketplace, provider?: string) => Promise<string>;
        /**
         * Update marketplace fee.
         * @param body request data
         * @param provider optional provider to enter. if not present, Tatum Web3 will be used.
         * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS
         */
        updateFee: (body: ChainUpdateFee, provider?: string) => Promise<string>;
        /**
         * Update marketplace fee recipient.
         * @param body request data
         * @param provider optional provider to enter. if not present, Tatum Web3 will be used.
         * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS
         */
        updateFeeRecipient: (body: ChainUpdateFeeRecipient, provider?: string) => Promise<string>;
        /**
         * Buy listing on the marketplace. Buyer must either send native assets with this operation, or approve ERC20 token spending before.
         * After listing is sold, it's in a pending state to be processed by the marketplace. Noone receives the assets unless the marketplace operator processes that.
         * @param body request data
         * @param provider optional provider to enter. if not present, Tatum Web3 will be used.
         * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS
         */
        buyMarketplaceListing: (body: ChainBuyAssetOnMarketplace, provider?: string) => Promise<string>;
        /**
         * Create new listing on the marketplace. Only marketplace operator can establish those on behalf of the seller of the NFT.
         * After listing is created, seller must approve the asset for spending to the marketplace smart contract.
         * Only listing for existing NFTs can be created - seller must be owner of the NFT asset.
         * @param body request data
         * @param provider optional provider to enter. if not present, Tatum Web3 will be used.
         * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS
         */
        sellMarketplaceListing: (body: ChainSellAssetOnMarketplace, provider?: string) => Promise<string>;
        /**
         * Cancel listing on the marketplace. Only possible for the seller or the operator. There must be no buyer present for that listing. NFT asset is sent back to the seller.
         * @param body request data
         * @param provider optional provider to enter. if not present, Tatum Web3 will be used.
         * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS
         */
        cancelMarketplaceListing: (body: ChainCancelSellAssetOnMarketplace, provider?: string) => Promise<string>;
    };
    send: {
        /**
         * Approve ERC20 spending for marketplace to perform buy with ERC20 token.
         * @param body request data
         * @param provider optional provider to enter. if not present, Tatum Web3 will be used.
         * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS
         */
        approveErc20Spending: (body: ChainApproveErc20, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
        /**
         * Approve NFT transfer for listing.
         * @param body request data
         * @param provider optional provider to enter. if not present, Tatum Web3 will be used.
         * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS
         */
        auctionApproveNftTransferSignedTransaction: (body: ApproveNftTransfer, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
        /**
         * Deploy new smart contract for NFT marketplace logic. Smart contract enables marketplace operator to create new listing for NFT (ERC-721/1155).
         * Operator can set a fee in percentage, which will be paid on top of the price of the asset.
         * Listing can be offered for native asset - ETH, BSC, etc. - or any ERC20 token - this is configurable during listing creation.
         * Once the listing is created, seller must send the NFT asset to the smart contract.
         * Buyer will buy the asset from the listing using native asset - send assets along the buyAssetFromListing() smart contract call, or via ERC20 token.
         * Buyer of the listing must perform approval for the smart contract to access ERC20 token, before the actual buyAssetFromListing() method is called.
         * Once both assets - from buyer and seller - are in the smart contract, NFT is sent to the buyer, price is sent to the seller
         * and marketplace fee is set to the operator.
         * @param body request data
         * @param provider optional provider to enter. if not present, Tatum Web3 will be used.
         * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS
         */
        generateMarketplace: (body: ChainGenerateMarketplace, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
        /**
         * Update marketplace fee.
         * @param body request data
         * @param provider optional provider to enter. if not present, Tatum Web3 will be used.
         * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS
         */
        updateFee: (body: ChainUpdateFee, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
        /**
         * Update marketplace fee recipient.
         * @param body request data
         * @param provider optional provider to enter. if not present, Tatum Web3 will be used.
         * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS
         */
        updateFeeRecipient: (body: ChainUpdateFeeRecipient, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
        /**
         * Buy listing on the marketplace. Buyer must either send native assets with this operation, or approve ERC20 token spending before.
         * After listing is sold, it's in a pending state to be processed by the marketplace. Noone receives the assets unless the marketplace operator processes that.
         * @param body request data
         * @param provider optional provider to enter. if not present, Tatum Web3 will be used.
         * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS
         */
        buyMarketplaceListing: (body: ChainBuyAssetOnMarketplace, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
        /**
         * Create new listing on the marketplace. Only marketplace operator can establish those on behalf of the seller of the NFT.
         * After listing is created, seller must approve the asset for spending to the marketplace smart contract.
         * Only listing for existing NFTs can be created - seller must be owner of the NFT asset.
         * @param body request data
         * @param provider optional provider to enter. if not present, Tatum Web3 will be used.
         * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS
         */
        sellMarketplaceListing: (body: ChainSellAssetOnMarketplace, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
        /**
         * Cancel listing on the marketplace. Only possible for the seller or the operator. There must be no buyer present for that listing. NFT asset is sent back to the seller.
         * @param body request data
         * @param provider optional provider to enter. if not present, Tatum Web3 will be used.
         * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS
         */
        cancelMarketplaceListing: (body: ChainCancelSellAssetOnMarketplace, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
    };
};
