import { BroadcastFunction, ChainBurnMultiToken, ChainBurnMultiTokenBatch, ChainDeployMultiToken, ChainMintMultiToken, ChainMintMultiTokenBatch, ChainTransferMultiToken, ChainTransferMultiTokenBatch } from '@tatumio/shared-blockchain-abstract';
import { MultiTokensErc1155OrCompatibleService } from '@tatumio/api-client';
import { EvmBasedWeb3 } from '../../services/evm-based.web3';
import { AddressTransformer } from '../../evm-based.utils';
import { EvmBasedBlockchain } from '@tatumio/shared-core';
export declare const multiToken: ({ blockchain, web3, broadcastFunction, addressTransformer, }: {
    blockchain: EvmBasedBlockchain;
    web3: EvmBasedWeb3;
    broadcastFunction: BroadcastFunction;
    addressTransformer?: AddressTransformer;
}) => {
    prepare: {
        /**
         * Sign mint MultiToken transaction with private keys locally. Nothing is broadcast to the blockchain.
         * @param body content of the transaction to broadcast
         * @param provider url of the Server to connect to. If not set, default public server will be used.
         * @returns transaction data to be broadcast to blockchain.
         */
        mintMultiTokenTransaction: (body: ChainMintMultiToken, provider?: string) => Promise<string>;
        /**
         * Sign mint MultiToken batch transaction with private keys locally. Nothing is broadcast to the blockchain.
         * @param body content of the transaction to broadcast
         * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.
         * @returns transaction data to be broadcast to blockchain.
         */
        mintMultiTokenBatchTransaction: (body: ChainMintMultiTokenBatch, provider?: string) => Promise<string>;
        /**
         * Send MultiToken transaction with private keys locally. Nothing is broadcast to the blockchain.
         * This operation is irreversible.
         * @param body content of the transaction to broadcast
         * @param provider url of the Server to connect to. If not set, default public server will be used.
         * @returns transaction id of the transaction in the blockchain
         */
        transferMultiTokenTransaction: (body: ChainTransferMultiToken, provider?: string) => Promise<string>;
        /**
         * Send MultiToken batch transaction with private keys locally. Nothing is broadcast to the blockchain.
         * This operation is irreversible.
         * @param body content of the transaction to broadcast
         * @param provider url of the Server to connect to. If not set, default public server will be used.
         * @returns transaction id of the transaction in the blockchain
         */
        transferMultiTokenBatchTransaction: (body: ChainTransferMultiTokenBatch, provider?: string) => Promise<string>;
        /**
         * Sign deploy MultiToken transaction with private keys locally. Nothing is broadcast to the blockchain.
         * @param body content of the transaction to broadcast
         * @param provider url of the Server to connect to. If not set, default public server will be used.
         * @returns transaction data to be broadcast to blockchain.
         */
        deployMultiTokenTransaction: (body: ChainDeployMultiToken, provider?: string) => Promise<string>;
        /**
         * Sign burn MultiToken transaction with private keys locally. Nothing is broadcast to the blockchain.
         * @param body content of the transaction to broadcast
         * @param provider url of the Server to connect to. If not set, default public server will be used.
         * @returns transaction data to be broadcast to blockchain.
         */
        burnMultiTokenTransaction: (body: ChainBurnMultiToken, provider?: string) => Promise<string>;
        /**
         * Sign burn MultiToken batch transaction with private keys locally. Nothing is broadcast to the blockchain.
         * @param body content of the transaction to broadcast
         * @param provider url of the Server to connect to. If not set, default public server will be used.
         * @returns transaction data to be broadcast to blockchain.
         */
        burnMultiTokenBatchTransaction: (body: ChainBurnMultiTokenBatch, provider?: string) => Promise<string>;
    };
    send: {
        /**
         * Send MultiToken mint transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
         * @param body content of the transaction to broadcast
         * @param provider url of the Server to connect to. If not set, default public server will be used.
         * @returns transaction data to be broadcast to blockchain.
         */
        mintMultiTokenTransaction: (body: ChainMintMultiToken, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
        /**
         * Send MultiToken mint batch transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
         * @param body content of the transaction to broadcast
         * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.
         * @returns transaction data to be broadcast to blockchain.
         */
        mintMultiTokenBatchTransaction: (body: ChainMintMultiTokenBatch, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
        /**
         * Send MultiToken transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
         * This operation is irreversible.
         * @param body content of the transaction to broadcast
         * @param provider url of the Server to connect to. If not set, default public server will be used.
         * @returns transaction id of the transaction in the blockchain
         */
        transferMultiTokenTransaction: (body: ChainTransferMultiToken, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
        /**
         * Send MultiToken batch transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
         * This operation is irreversible.
         * @param body content of the transaction to broadcast
         * @param provider url of the Server to connect to. If not set, default public server will be used.
         * @returns transaction id of the transaction in the blockchain
         */
        transferMultiTokenBatchTransaction: (body: ChainTransferMultiTokenBatch, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
        /**
         ** Send MultiToken deploy transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
         * @param body content of the transaction to broadcast
         * @param provider url of the Server to connect to. If not set, default public server will be used.
         * @returns transaction data to be broadcast to blockchain.
         */
        deployMultiTokenTransaction: (body: ChainDeployMultiToken, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
        /**
         * Send MultiToken butn transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
         * @param body content of the transaction to broadcast
         * @param provider url of the Server to connect to. If not set, default public server will be used.
         * @returns transaction data to be broadcast to blockchain.
         */
        burnMultiTokenTransaction: (body: ChainBurnMultiToken, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
        /**
         * Send MultiToken butn batch transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
         * @param body content of the transaction to broadcast
         * @param provider url of the Server to connect to. If not set, default public server will be used.
         * @returns transaction data to be broadcast to blockchain.
         */
        burnMultiTokenBatchTransaction: (body: ChainBurnMultiTokenBatch, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
    };
    getTransactionByAddress: typeof MultiTokensErc1155OrCompatibleService.multiTokenGetTransactionByAddress;
    getTransaction: typeof MultiTokensErc1155OrCompatibleService.multiTokenGetTransaction;
    getAddressBalance: typeof MultiTokensErc1155OrCompatibleService.multiTokenGetAddressBalance;
    getBalance: typeof MultiTokensErc1155OrCompatibleService.multiTokenGetBalance;
    getBalanceBatch: typeof MultiTokensErc1155OrCompatibleService.multiTokenGetBalanceBatch;
    getMetadata: typeof MultiTokensErc1155OrCompatibleService.multiTokenGetMetadata;
};
