import { BroadcastFunction, ChainApproveCustodialTransfer, ChainBatchTransferCustodialWallet, ChainGenerateCustodialWalletBatch, ChainTransferCustodialWallet } from '@tatumio/shared-blockchain-abstract';
import { EvmBasedWeb3 } from '../../services/evm-based.web3';
import { AddressTransformer } from '../../evm-based.utils';
import { TransactionHash } from '@tatumio/api-client';
export declare const custodial: ({ web3, broadcastFunction, addressTransformer, }: {
    web3: EvmBasedWeb3;
    broadcastFunction: BroadcastFunction;
    addressTransformer?: AddressTransformer;
}) => {
    prepare: {
        /**
         * Prepare signed transaction from the custodial SC wallet.
         * @param testnet chain to work with
         * @param body request data
         * @param provider optional provider to enter. if not present, Tatum Web3 will be used.
         * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS
         */
        transferFromCustodialWallet: (body: ChainTransferCustodialWallet, provider?: string, testnet?: boolean) => Promise<any>;
        /**
         * Prepare signed batch transaction from the custodial SC wallet.
         * @param testnet chain to work with
         * @param body request data
         * @param provider optional provider to enter. if not present, Tatum Web3 will be used.
         * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS
         */
        batchTransferFromCustodialWallet: (body: ChainBatchTransferCustodialWallet, provider?: string, testnet?: boolean) => Promise<any>;
        /**
         * Prepare signed approve transaction from the custodial SC wallet.
         * @param body request data
         * @param provider optional provider to enter. if not present, Tatum Web3 will be used.
         * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS
         */
        approveFromCustodialWallet: (body: ChainApproveCustodialTransfer, provider?: string) => Promise<any>;
        /**
         * Generate new smart contract based custodial wallet. This wallet is able to receive any type of assets, but transaction costs connected to the withdrawal
         * of assets is covered by the deployer.
         * @param testnet chain to work with
         * @param body request data
         * @param provider optional provider to enter. if not present, Tatum Web3 will be used.
         * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS
         */
        custodialWalletBatch: (body: ChainGenerateCustodialWalletBatch, provider?: string, testnet?: boolean) => Promise<any>;
    };
    send: {
        /**
         * Send signed transaction from the custodial SC wallet.
         * @param testnet chain to work with
         * @param body request data
         * @param provider optional provider to enter. if not present, Tatum Web3 will be used.
         * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS
         */
        transferFromCustodialWallet: (body: ChainTransferCustodialWallet, provider?: string, testnet?: boolean) => Promise<TransactionHash | import("@tatumio/api-client").SignatureId>;
        /**
         * Send signed batch transaction from the custodial SC wallet.
         * @param testnet chain to work with
         * @param body request data
         * @param provider optional provider to enter. if not present, Tatum Web3 will be used.
         * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS
         */
        batchTransferFromCustodialWallet: (body: ChainBatchTransferCustodialWallet, provider?: string, testnet?: boolean) => Promise<TransactionHash | import("@tatumio/api-client").SignatureId>;
        /**
         * Send signed approve transaction from the custodial SC wallet.
         * @param body request data
         * @param provider optional provider to enter. if not present, Tatum Web3 will be used.
         * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS
         */
        approveFromCustodialWallet: (body: ChainApproveCustodialTransfer, provider?: string) => Promise<TransactionHash | import("@tatumio/api-client").SignatureId>;
        /**
         * Generate new smart contract based custodial wallet. This wallet is able to receive any type of assets, but transaction costs connected to the withdrawal
         * of assets is covered by the deployer.
         * @param testnet chain to work with
         * @param body request data
         * @param provider optional provider to enter. if not present, Tatum Web3 will be used.
         * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS
         */
        custodialWalletBatch: (body: ChainGenerateCustodialWalletBatch, provider?: string, testnet?: boolean) => Promise<string | TransactionHash | import("@tatumio/api-client").SignatureId>;
    };
};
