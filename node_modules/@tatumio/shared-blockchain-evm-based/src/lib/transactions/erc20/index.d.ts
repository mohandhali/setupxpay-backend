import { BroadcastFunction, ChainApproveErc20, ChainBurnErc20, ChainSdkDeployErc20, ChainMintErc20, ChainTransferErc20 } from '@tatumio/shared-blockchain-abstract';
import { EvmBasedWeb3 } from '../../services/evm-based.web3';
import { AddressTransformer } from '../../evm-based.utils';
import { EvmBasedBlockchain } from '@tatumio/shared-core';
export declare const erc20: ({ blockchain, web3, broadcastFunction, addressTransformer, }: {
    blockchain: EvmBasedBlockchain;
    web3: EvmBasedWeb3;
    broadcastFunction: BroadcastFunction;
    addressTransformer?: AddressTransformer;
}) => {
    /**
     * Get Decimals for the ERC20 token
     * @param contractAddress address of the token
     * @param provider optional provider
     */
    decimals: (contractAddress: string, provider?: string) => Promise<any>;
    prepare: {
        /**
         * Sign deploy erc20 transaction with private keys locally. Nothing is broadcast to the blockchain.
         * @param body content of the transaction to broadcast
         * @param provider url of the Server to connect to. If not set, default public server will be used.
         * @returns transaction data to be broadcast to blockchain.
         */
        deploySignedTransaction: (body: ChainSdkDeployErc20, provider?: string) => Promise<string>;
        /**
         * Sign transfer erc20 transaction with private keys locally. Nothing is broadcast to the blockchain.
         * @param body content of the transaction to broadcast
         * @param provider url of the Server to connect to. If not set, default public server will be used.
         * @returns transaction data to be broadcast to blockchain.
         */
        transferSignedTransaction: (body: ChainTransferErc20, provider?: string) => Promise<string>;
        /**
         * Sign mint erc20 transaction with private keys locally. Nothing is broadcast to the blockchain.
         * @param body content of the transaction to broadcast
         * @param provider url of the Server to connect to. If not set, default public server will be used.
         * @returns transaction data to be broadcast to blockchain.
         */
        mintSignedTransaction: (body: ChainMintErc20, provider?: string) => Promise<string>;
        /**
         * Sign burn erc20 transaction with private keys locally. Nothing is broadcast to the blockchain.
         * @param body content of the transaction to broadcast
         * @param provider url of the Server to connect to. If not set, default public server will be used.
         * @returns transaction data to be broadcast to blockchain.
         */
        burnSignedTransaction: (body: ChainBurnErc20, provider?: string) => Promise<string>;
        /**
         * Prepare approve ERC20 signed transaction.
         * @param body body of the approve operation
         * @param provider optional Web3 provider
         */
        approveSignedTransaction: (body: ChainApproveErc20, provider?: string) => Promise<string>;
    };
    send: {
        /**
         * Send deploy erc20 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
         * This operation is irreversible.
         * @param body content of the transaction to broadcast
         * @param provider url of the Server to connect to. If not set, default public server will be used.
         * @returns transaction id of the transaction in the blockchain
         */
        deploySignedTransaction: (body: ChainSdkDeployErc20, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
        /**
         * Send transfer erc20 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
         * This operation is irreversible.
         * @param body content of the transaction to broadcast
         * @param provider url of the Server to connect to. If not set, default public server will be used.
         * @returns transaction id of the transaction in the blockchain
         */
        transferSignedTransaction: (body: ChainTransferErc20, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
        /**
         * Send mint erc20 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
         * This operation is irreversible.
         * @param body content of the transaction to broadcast
         * @param provider url of the Server to connect to. If not set, default public server will be used.
         * @returns transaction id of the transaction in the blockchain
         */
        mintSignedTransaction: (body: ChainMintErc20, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
        /**
         * Send burn erc20 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
         * This operation is irreversible.
         * @param body content of the transaction to broadcast
         * @param provider url of the Server to connect to. If not set, default public server will be used.
         * @returns transaction id of the transaction in the blockchain
         */
        burnSignedTransaction: (body: ChainBurnErc20, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
        /**
         * Send approve erc20 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
         * This operation is irreversible.
         * @param body content of the transaction to broadcast
         * @param provider url of the Server to connect to. If not set, default public server will be used.
         * @returns transaction id of the transaction in the blockchain
         */
        approveSignedTransaction: (body: ChainApproveErc20, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
    };
};
