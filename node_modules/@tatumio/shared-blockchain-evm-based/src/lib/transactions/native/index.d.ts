import { BroadcastFunction, ChainTransferNative } from '@tatumio/shared-blockchain-abstract';
import { EvmBasedWeb3 } from '../../services/evm-based.web3';
import { AddressTransformer } from '../../evm-based.utils';
export declare const native: ({ web3, broadcastFunction, transferApiMethod, addressTransformer, }: {
    web3: EvmBasedWeb3;
    broadcastFunction: BroadcastFunction;
    transferApiMethod: any;
    addressTransformer?: AddressTransformer;
}) => {
    prepare: {
        /**
         * Sign transfer of native asset transaction with private keys locally. Nothing is broadcast to the blockchain.
         * @param body content of the transaction to broadcast
         * @param provider url of the Server to connect to. If not set, default public server will be used.
         * @returns transaction data to be broadcast to blockchain.
         */
        transferSignedTransaction: (body: ChainTransferNative, provider?: string) => Promise<string>;
    };
    send: {
        /**
         * Send transfer of native asset transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
         * This operation is irreversible.
         * @param body content of the transaction to broadcast
         * @param provider url of the Server to connect to. If not set, default public server will be used.
         * @returns transaction id of the transaction in the blockchain
         */
        transferSignedTransaction: (body: ChainTransferNative, provider?: string) => Promise<any>;
    };
};
