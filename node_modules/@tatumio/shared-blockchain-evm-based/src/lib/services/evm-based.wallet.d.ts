import { Wallet } from '@tatumio/api-client';
import { EvmBasedBlockchain } from '@tatumio/shared-core';
export declare const evmBasedWallet: (args: {
    blockchain: EvmBasedBlockchain;
}) => {
    /**
     * Generate address
     * @param xpub extended public key to generate address from
     * @param i derivation index of address to generate. Up to 2^31 addresses can be generated.
     * @returns blockchain address
     */
    generateAddressFromXPub(xpub: string, i: number): string;
    /**
     * Generate ERC20 private key from mnemonic seed
     * @param mnemonic mnemonic to generate private key from
     * @param i derivation index of private key to generate.
     * @param options optional testnet or mainnet version of address. Default: mainnet
     * @returns blockchain private key to the address
     */
    generatePrivateKeyFromMnemonic(mnemonic: string, i: number, options?: {
        testnet: boolean;
    }): Promise<string>;
    /**
     * Generate address from private key
     * @param privateKey private key to use
     * @returns blockchain private key to the address
     */
    generateAddressFromPrivateKey(privateKey: string): string;
    /**
     * Generate wallet
     * @param mnemonic mnemonic seed to use. If not present, new one will be generated
     * @param options optional testnet or mainnet version of address. Default: mainnet
     * @returns wallet or a combination of address and private key
     */
    generateWallet(mnemonic?: string, options?: {
        testnet: boolean;
    }): Promise<Required<Wallet>>;
};
