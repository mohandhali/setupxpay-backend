import { CallSmartContractMethod } from '@tatumio/api-client';
import { ChainBatchTransferCustodialWallet, ChainGenerateCustodialAddress, ChainGenerateCustodialWalletBatch, ChainSmartContractMethodInvocation, ChainTransferCustodialWallet, ChainTransferCustodialWalletCelo } from '@tatumio/shared-blockchain-abstract';
import { ContractAbi } from '../contracts/common.contracts';
import { EvmBasedWeb3 } from './evm-based.web3';
import { GasPumpChain } from './evm-based.gas.pump';
import { AddressTransformer, AddressTransformerDefault } from '../evm-based.utils';
export declare const evmBasedCustodial: () => {
    obtainCustodialAddressType: (body: ChainGenerateCustodialAddress) => ContractAbi;
    prepareTransferFromCustodialWalletAbstract: <SCBody extends CallSmartContractMethod>(body: ChainTransferCustodialWallet | ChainTransferCustodialWalletCelo, web3: EvmBasedWeb3, getContractDecimals: (contractAddress: string, web3: EvmBasedWeb3, provider?: string, testnet?: boolean) => Promise<any>, prepareSmartContractWriteMethodInvocation: ({ body, web3, provider, chain, addressTransformer, }: {
        body: ChainSmartContractMethodInvocation;
        web3: EvmBasedWeb3;
        provider?: string;
        chain?: GasPumpChain;
        addressTransformer?: AddressTransformer;
    }) => Promise<string>, decimals: number, testnet?: boolean, provider?: string) => Promise<string>;
    prepareBatchTransferFromCustodialWalletAbstract: <SCBody_1 extends CallSmartContractMethod>(body: ChainBatchTransferCustodialWallet, web3: EvmBasedWeb3, getContractDecimals: (contractAddress: string, web3: EvmBasedWeb3, provider?: string, testnet?: boolean) => Promise<any>, prepareSmartContractWriteMethodInvocation: ({ body, web3, provider, chain, addressTransformer, }: {
        body: ChainSmartContractMethodInvocation;
        web3: EvmBasedWeb3;
        provider?: string;
        chain?: GasPumpChain;
        addressTransformer?: AddressTransformer;
    }) => Promise<string>, decimals: number, testnet?: boolean, provider?: string) => Promise<string>;
    prepareCustodialWalletBatchAbstract: ({ body, testnet, addressTransformer, }: {
        body: ChainGenerateCustodialWalletBatch;
        addressTransformer?: AddressTransformer;
        testnet?: boolean;
    }) => Promise<{
        params: any[];
        methodName: string;
        methodSig: any;
        bodyWithContractAddress: {
            contractAddress: string;
            chain: "BSC" | "ETH" | "MATIC" | "ONE" | "CELO";
            feesCovered: boolean;
            batchCount: number;
            owner: string;
        } | {
            contractAddress: string;
            chain: "BSC" | "ETH" | "KLAY" | "MATIC" | "ONE" | "XDC";
            fromPrivateKey: string;
            batchCount: number;
            owner: string;
            fee?: {
                gasLimit: string;
                gasPrice: string;
            };
            nonce?: number;
        } | {
            contractAddress: string;
            chain: "BSC" | "ETH" | "KLAY" | "MATIC" | "ONE" | "XDC";
            signatureId: string;
            index?: number;
            batchCount: number;
            owner: string;
            fee?: {
                gasLimit: string;
                gasPrice: string;
            };
            nonce?: number;
        } | {
            contractAddress: string;
            chain: "CELO";
            feeCurrency?: "CELO" | "CUSD" | "CEUR";
            fromPrivateKey: string;
            batchCount: number;
            owner: string;
            fee?: import("@tatumio/api-client").CustomFee;
            nonce?: number;
        } | {
            contractAddress: string;
            chain: "CELO";
            feeCurrency?: "CELO" | "CUSD" | "CEUR";
            signatureId: string;
            index?: number;
            batchCount: number;
            owner: string;
            fee?: import("@tatumio/api-client").CustomFee;
            nonce?: number;
        };
    }>;
    getCustodialFactoryContractAddress: (chain: 'CELO' | 'TRON' | 'ONE' | 'XDC' | 'ETH' | 'MATIC' | 'KLAY' | 'BSC', testnet?: boolean) => "0xb1462fE8E9Cf82c0296022Cca7bEfA3Fd4c12B34" | "0x481D6f967B120E094D3551DA2C4951242Be582af" | "0xC7f23843d5A51221df4B6D0778910b39b40134b4" | "TRM8P5gpzAr85p2a5BMvqb9UfEdFEwEgA7" | "TG59uLNQvCR45F6yKHPXipvCu7wg5D88Wr" | "0x86e27174edd52469f928f6206f3d8e4316525f00" | "xdc6709Bdda623aF7EB152cB2fE2562aB7e031e564f" | "xdc3485fdba44736859267789ac9c248cc4c1443956" | "0x4c6315C5d9b0220a8e171AF18766647EFe675a1F" | "0xd8050943c1E2764F750EC868ae1B375C4768d89A" | "0x6792a82ffab4890cfbcee6c2c775ae9c898afe71" | "0xfc05d7fed6af03df8095cc93b674acac3f72756c" | "0xd68c48173ccb0313442b23aed68b71961c618ade" | "0xeac818b4CC468Cf6556f772C4BB86e132E6ac0F3" | "0x9067f90c0975679158331fe43ad7a0a105424e0d";
};
