"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.evmBasedGasPump = exports.indexesFromRange = exports.XDC_MAINNET_CUSTODIAL_FACTORY_V2 = exports.XDC_TESTNET_CUSTODIAL_FACTORY_V2 = exports.ONE_MAINNET_CUSTODIAL_FACTORY_V2 = exports.ONE_TESTNET_CUSTODIAL_FACTORY_V2 = exports.TRON_MAINNET_CUSTODIAL_FACTORY_V2 = exports.TRON_TESTNET_CUSTODIAL_FACTORY_V2 = exports.BSC_MAINNET_CUSTODIAL_FACTORY_V2 = exports.BSC_TESTNET_CUSTODIAL_FACTORY_V2 = exports.MATIC_MAINNET_CUSTODIAL_FACTORY_V2 = exports.MATIC_TESTNET_CUSTODIAL_FACTORY_V2 = exports.KLAY_MAINNET_CUSTODIAL_FACTORY_V2 = exports.KLAY_TESTNET_CUSTODIAL_FACTORY_V2 = exports.ETH_MAINNET_CUSTODIAL_FACTORY_V2 = exports.ETH_TESTNET_CUSTODIAL_FACTORY_V2 = exports.CELO_MAINNET_CUSTODIAL_FACTORY_V2 = exports.CELO_TESTNET_CUSTODIAL_FACTORY_V2 = void 0;
const tslib_1 = require("tslib");
const bignumber_js_1 = tslib_1.__importDefault(require("bignumber.js"));
const api_client_1 = require("@tatumio/api-client");
const range = (from, to) => to - from + 1;
exports.CELO_TESTNET_CUSTODIAL_FACTORY_V2 = '0x5E3D93eF7C1eE50eA4536791E1441e3281f55154';
exports.CELO_MAINNET_CUSTODIAL_FACTORY_V2 = '0xd0b8460559b945aa578b81f0ab3ac998e7360332';
exports.ETH_TESTNET_CUSTODIAL_FACTORY_V2 = '0x4B32F0c23477D8512b39009d1625eAF2a884156D';
exports.ETH_MAINNET_CUSTODIAL_FACTORY_V2 = '0xa2a1bf5a83f9daec2dc364e1c561e937163cb613';
exports.KLAY_TESTNET_CUSTODIAL_FACTORY_V2 = '0x75a4462bf0938cc7558ada32dc554ca5c7ed1adf';
exports.KLAY_MAINNET_CUSTODIAL_FACTORY_V2 = '0x789c00ed7ddd72a806dbac40df926df32fde3c2f';
exports.MATIC_TESTNET_CUSTODIAL_FACTORY_V2 = '0xf7b8514BD32E0d0f53703f8C829E8b61c78780dA';
exports.MATIC_MAINNET_CUSTODIAL_FACTORY_V2 = '0xa6e2445a16859d3717aed095396afaab9ff2fbd3';
exports.BSC_TESTNET_CUSTODIAL_FACTORY_V2 = '0x3807f9384bc6ff561245a60cb71e2cf65b8d146a';
exports.BSC_MAINNET_CUSTODIAL_FACTORY_V2 = '0x40c762cb7d2f5ad719ed6c9651f5f2370f5a1c88';
exports.TRON_TESTNET_CUSTODIAL_FACTORY_V2 = 'TYGfTkhjii3gmxqBczcHn1FoTrRWFUXvsp';
exports.TRON_MAINNET_CUSTODIAL_FACTORY_V2 = 'TUHmKLeq26QFyMwxQSYd451c4SZQQuKcHb';
exports.ONE_TESTNET_CUSTODIAL_FACTORY_V2 = '0xCd2AdA00c48A27FAa5Cc67F9A1ed55B89dDf7F77';
exports.ONE_MAINNET_CUSTODIAL_FACTORY_V2 = '0xb1462fE8E9Cf82c0296022Cca7bEfA3Fd4c12B34';
exports.XDC_TESTNET_CUSTODIAL_FACTORY_V2 = '0x1cfc7878cf6ae32a50f84481690f6fb04574de21';
exports.XDC_MAINNET_CUSTODIAL_FACTORY_V2 = '0x1cfc7878cf6ae32a50f84481690f6fb04574de21';
const indexesFromRange = (from, to) => Array.from(Array(range(from, to)).keys()).map((val) => `0x${new bignumber_js_1.default(val + from).toString(16)}`);
exports.indexesFromRange = indexesFromRange;
const evmBasedGasPump = () => {
    return {
        prepareGasPumpWalletBatchAbstract: (body, web3, testnet) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const indexes = (0, exports.indexesFromRange)(body.from, body.to);
            const params = [body.owner.trim(), indexes];
            const methodName = 'createBatch';
            const methodSig = undefined;
            const bodyWithContractAddress = Object.assign(Object.assign({}, body), { contractAddress: (0, exports.evmBasedGasPump)().getGasPumpFactoryContractAddress(body.chain, testnet) });
            return { params, methodName, methodSig, bodyWithContractAddress };
        }),
        getGasPumpFactoryContractAddress: (chain, testnet) => {
            switch (chain) {
                case api_client_1.Currency.CELO:
                    return testnet ? exports.CELO_TESTNET_CUSTODIAL_FACTORY_V2 : exports.CELO_MAINNET_CUSTODIAL_FACTORY_V2;
                case api_client_1.Currency.TRON:
                    return testnet ? exports.TRON_TESTNET_CUSTODIAL_FACTORY_V2 : exports.TRON_MAINNET_CUSTODIAL_FACTORY_V2;
                case api_client_1.Currency.ONE:
                    return testnet ? exports.ONE_TESTNET_CUSTODIAL_FACTORY_V2 : exports.ONE_MAINNET_CUSTODIAL_FACTORY_V2;
                case api_client_1.Currency.ETH:
                    return testnet ? exports.ETH_TESTNET_CUSTODIAL_FACTORY_V2 : exports.ETH_MAINNET_CUSTODIAL_FACTORY_V2;
                case api_client_1.Currency.MATIC:
                    return testnet ? exports.MATIC_TESTNET_CUSTODIAL_FACTORY_V2 : exports.MATIC_MAINNET_CUSTODIAL_FACTORY_V2;
                case api_client_1.Currency.KLAY:
                    return testnet ? exports.KLAY_TESTNET_CUSTODIAL_FACTORY_V2 : exports.KLAY_MAINNET_CUSTODIAL_FACTORY_V2;
                case api_client_1.Currency.BSC:
                    return testnet ? exports.BSC_TESTNET_CUSTODIAL_FACTORY_V2 : exports.BSC_MAINNET_CUSTODIAL_FACTORY_V2;
                case api_client_1.Currency.XDC:
                    return testnet ? exports.XDC_TESTNET_CUSTODIAL_FACTORY_V2 : exports.XDC_MAINNET_CUSTODIAL_FACTORY_V2;
                default:
                    throw new Error('Unsupported chain.');
            }
        },
    };
};
exports.evmBasedGasPump = evmBasedGasPump;
//# sourceMappingURL=evm-based.gas.pump.js.map