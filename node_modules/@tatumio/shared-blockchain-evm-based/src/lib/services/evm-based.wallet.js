"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.evmBasedWallet = void 0;
const tslib_1 = require("tslib");
const evm_based_utils_1 = require("../evm-based.utils");
const evmBasedWallet = (args) => {
    return {
        /**
         * Generate address
         * @param xpub extended public key to generate address from
         * @param i derivation index of address to generate. Up to 2^31 addresses can be generated.
         * @returns blockchain address
         */
        generateAddressFromXPub(xpub, i) {
            return evm_based_utils_1.evmBasedUtils.generateAddressFromXPub(xpub, i);
        },
        /**
         * Generate ERC20 private key from mnemonic seed
         * @param mnemonic mnemonic to generate private key from
         * @param i derivation index of private key to generate.
         * @param options optional testnet or mainnet version of address. Default: mainnet
         * @returns blockchain private key to the address
         */
        generatePrivateKeyFromMnemonic(mnemonic, i, options) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                return evm_based_utils_1.evmBasedUtils.generatePrivateKeyFromMnemonic(args.blockchain, mnemonic, i, options);
            });
        },
        /**
         * Generate address from private key
         * @param privateKey private key to use
         * @returns blockchain private key to the address
         */
        generateAddressFromPrivateKey(privateKey) {
            return evm_based_utils_1.evmBasedUtils.generateAddressFromPrivateKey(args.blockchain, privateKey);
        },
        /**
         * Generate wallet
         * @param mnemonic mnemonic seed to use. If not present, new one will be generated
         * @param options optional testnet or mainnet version of address. Default: mainnet
         * @returns wallet or a combination of address and private key
         */
        generateWallet(mnemonic, options) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                return evm_based_utils_1.evmBasedUtils.generateBlockchainWallet(args.blockchain, mnemonic, options);
            });
        },
    };
};
exports.evmBasedWallet = evmBasedWallet;
//# sourceMappingURL=evm-based.wallet.js.map