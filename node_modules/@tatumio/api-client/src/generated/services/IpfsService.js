"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IpfsService = void 0;
const request_1 = require("../core/request");
class IpfsService {
    /**
     * Get file from IPFS
     * <h4>1 credit per API call.</h4><br/><p>Gets data from the IPFS.</p>
     * @param id IPFS CID of the file
     * @returns binary OK
     * @throws ApiError
     */
    static getIpfsData(id) {
        return (0, request_1.request)({
            method: 'GET',
            path: `/v3/ipfs/${id}`,
            errors: {
                400: `Bad Request`,
                401: `Unauthorized. Not valid or inactive subscription key present in the HTTP Header.`,
                403: `Forbidden. The request is authenticated, but it is not possible to perform the operation due to logical error or invalid permissions.`,
                500: `Internal server error. There was an error on the server during the processing of the request.`,
            },
        });
    }
    /**
     * Store data to IPFS
     * <h4>2 credits per API call. Only files up to 50MB are available for storing.</h4><br/>
     * <p>Stores file on the IPFS. We are leveraging <a href="https://web3.storage/" target="_blank">web3.storage</a> from <a href="https://protocol.ai/" target="_blank">Protocol Labs</a> for free storage on the IPFS.</p>
     *
     * @param formData
     * @returns any OK
     * @throws ApiError
     */
    static storeIpfs(formData) {
        return (0, request_1.request)({
            method: 'POST',
            path: `/v3/ipfs`,
            formData: formData,
            mediaType: 'multipart/form-data',
            errors: {
                400: `Bad Request`,
                401: `Unauthorized. Not valid or inactive subscription key present in the HTTP Header.`,
                403: `Forbidden. The request is authenticated, but it is not possible to perform the operation due to logical error or invalid permissions.`,
                500: `Internal server error. There was an error on the server during the processing of the request.`,
            },
        });
    }
}
exports.IpfsService = IpfsService;
//# sourceMappingURL=IpfsService.js.map