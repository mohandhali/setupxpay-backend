import type { ExchangeRate } from '../models/ExchangeRate';
import type { FiatCurrency } from '../models/FiatCurrency';
import type { FiatOrCryptoCurrency } from '../models/FiatOrCryptoCurrency';
import type { RateQuery } from '../models/RateQuery';
import type { CancelablePromise } from '../core/CancelablePromise';
export declare class ExchangeRateService {
    /**
     * Get the current exchange rate for exchanging fiat/crypto assets
     * <p><b>1 credit per API call</b></p>
     * <p>Get the current exchange rate for exchanging fiat/crypto assets.</p>
     * <p>By default, the base pair (the target asset) is EUR. When obtaining the exchange rate for an asset (for example, BTC), the value returned by the API expresses the amount of EUR that can be currently exchanged into 1 BTC.</p>
     *
     * @param currency The fiat or crypto asset to exchange
     * @param basePair The target fiat asset to get the exchange rate for
     * @returns ExchangeRate OK
     * @throws ApiError
     */
    static getExchangeRate(currency: FiatOrCryptoCurrency, basePair?: FiatCurrency): CancelablePromise<ExchangeRate>;
    /**
     * Get the current exchange rates for exchanging fiat/crypto assets
     * <p><b>1 credit per pair per API call</b></p>
     * <p>Get the current exchange rates for exchanging fiat/crypto assets.</p>
     * <p>When obtaining the exchange rate for an asset (for example, BTC), the value returned by the API expresses the amount of EUR that can be currently exchanged into 1 BTC.</p>
     *
     * @param requestBody
     * @returns ExchangeRate OK
     * @throws ApiError
     */
    static getExchangeRates(requestBody: Array<RateQuery>): CancelablePromise<Array<ExchangeRate>>;
}
