import type { BnbAccount } from '../models/BnbAccount';
import type { BnbBlock } from '../models/BnbBlock';
import type { BnbTx } from '../models/BnbTx';
import type { BnbTxInAccount } from '../models/BnbTxInAccount';
import type { BnbWallet } from '../models/BnbWallet';
import type { Broadcast } from '../models/Broadcast';
import type { TransactionHash } from '../models/TransactionHash';
import type { TransferBnbBlockchain } from '../models/TransferBnbBlockchain';
import type { TransferBnbBlockchainKMS } from '../models/TransferBnbBlockchainKMS';
import type { CancelablePromise } from '../core/CancelablePromise';
export declare class BnbBeaconChainService {
    /**
     * Generate Binance wallet
     * <h4>5 credits per API call.</h4><br/>
     * <p>Generate BNB account. Tatum does not support HD wallet for BNB, only specific address and private key can be generated.</p>
     *
     * @returns BnbWallet OK
     * @throws ApiError
     */
    static bnbGenerateWallet(): CancelablePromise<BnbWallet>;
    /**
     * Get Binance current block
     * <h4>5 credits per API call.</h4><br/><p>Get Binance current block number.</p>
     * @returns number OK
     * @throws ApiError
     */
    static bnbGetCurrentBlock(): CancelablePromise<number>;
    /**
     * Get Binance Transactions in Block
     * <h4>5 credits per API call.</h4><br/><p>Get Transactions in block by block height.</p>
     * @param height Block height
     * @returns BnbBlock OK
     * @throws ApiError
     */
    static bnbGetBlock(height: number): CancelablePromise<BnbBlock>;
    /**
     * Get Binance Account
     * <h4>5 credits per API call.</h4><br/><p>Get Binance Account Detail by address.</p>
     * @param address Account address you want to get balance of
     * @returns BnbAccount OK
     * @throws ApiError
     */
    static bnbGetAccount(address: string): CancelablePromise<BnbAccount>;
    /**
     * Get Binance Transaction
     * <h4>5 credits per API call.</h4><br/><p>Get Binance Transaction by transaction hash.</p>
     * @param hash Transaction hash
     * @returns BnbTx OK
     * @throws ApiError
     */
    static bnbGetTransaction(hash: string): CancelablePromise<BnbTx>;
    /**
     * Get Binance Transactions By Address
     * <h4>5 credits per API call.</h4><br/><p>Get Binance Transactions by address.</p>
     * @param address Account address
     * @param startTime Start time in milliseconds
     * @param endTime End time in milliseconds
     * @param limit Items per page.
     * @param offset Pagination offset
     * @param asset Asset name
     * @param addressType Address type
     * @returns BnbTxInAccount OK
     * @throws ApiError
     */
    static bnbGetTxByAccount(address: string, startTime: number, endTime: number, limit?: number, offset?: number, asset?: string, addressType?: 'FROM' | 'TO'): CancelablePromise<BnbTxInAccount>;
    /**
     * Send Binance / Binance Token from account to account
     * <h4>10 credits per API call.</h4><br/>
     * <p>Send Binance or Binance Token token from account to account.<br/><br/>
     * This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key.
     * No one should ever send it's own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey.
     * PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production,
     * <a href="https://github.com/tatumio/tatum-kms" target="_blank">Tatum KMS</a> should be used for the highest security standards, and signatureId should be present in the request.
     * Alternatively, using the Tatum client library for supported languages.
     * </p>
     *
     * @param requestBody
     * @returns TransactionHash OK
     * @throws ApiError
     */
    static bnbBlockchainTransfer(requestBody: (TransferBnbBlockchain | TransferBnbBlockchainKMS)): CancelablePromise<TransactionHash>;
    /**
     * Broadcast signed BNB transaction
     * <h4>5 credits per API call.</h4><br/>
     * <p>Broadcast signed transaction to Binance blockchain. This method is used internally or Tatum client libraries.
     * It is possible to create custom signing mechanism and use this method only for broadcasting data to the blockchain.</p>
     *
     * @param requestBody
     * @returns TransactionHash OK
     * @throws ApiError
     */
    static bnbBroadcast(requestBody: Broadcast): CancelablePromise<TransactionHash>;
}
