import type { BroadcastKMS } from '../models/BroadcastKMS';
import type { SignatureId } from '../models/SignatureId';
import type { TransactionHash } from '../models/TransactionHash';
import type { TransferXlmBlockchain } from '../models/TransferXlmBlockchain';
import type { TransferXlmBlockchainAsset } from '../models/TransferXlmBlockchainAsset';
import type { TransferXlmBlockchainKMS } from '../models/TransferXlmBlockchainKMS';
import type { TransferXlmBlockchainKMSAsset } from '../models/TransferXlmBlockchainKMSAsset';
import type { TrustLineXlmBlockchain } from '../models/TrustLineXlmBlockchain';
import type { TrustLineXlmBlockchainKMS } from '../models/TrustLineXlmBlockchainKMS';
import type { XlmAccount } from '../models/XlmAccount';
import type { XlmLedger } from '../models/XlmLedger';
import type { XlmTx } from '../models/XlmTx';
import type { XlmWallet } from '../models/XlmWallet';
import type { CancelablePromise } from '../core/CancelablePromise';
export declare class StellarService {
    /**
     * Generate XLM account
     * <h4>5 credits per API call.</h4><br/>
     * <p>Generate XLM account. Tatum does not support HD wallet for XLM, only specific address and private key can be generated.</p>
     *
     * @returns XlmWallet OK
     * @throws ApiError
     */
    static xlmWallet(): CancelablePromise<XlmWallet>;
    /**
     * Get XLM Blockchain Information
     * <h4>5 credits per API call.</h4><br/><p>Get XLM Blockchain last closed ledger.</p>
     * @returns XlmLedger OK
     * @throws ApiError
     */
    static xlmGetLastClosedLedger(): CancelablePromise<XlmLedger>;
    /**
     * Get XLM Blockchain Ledger by sequence
     * <h4>5 credits per API call.</h4><br/><p>Get XLM Blockchain ledger for ledger sequence.</p>
     * @param sequence Sequence of the ledger.
     * @returns XlmLedger OK
     * @throws ApiError
     */
    static xlmGetLedger(sequence: string): CancelablePromise<XlmLedger>;
    /**
     * Get XLM Blockchain Transactions in Ledger
     * <h4>5 credits per API call.</h4><br/><p>Get XLM Blockchain transactions in the ledger.</p>
     * @param sequence Sequence of the ledger.
     * @returns XlmTx OK
     * @throws ApiError
     */
    static xlmGetLedgerTx(sequence: string): CancelablePromise<Array<XlmTx>>;
    /**
     * Get actual XLM fee
     * <h4>5 credits per API call.</h4><br/><p>Get XLM Blockchain fee in 1/10000000 of XLM (stroop)</p>
     * @returns number OK
     * @throws ApiError
     */
    static xlmGetFee(): CancelablePromise<number>;
    /**
     * Get XLM Account transactions
     * <h4>5 credits per API call.</h4><br/><p>List all XLM account transactions.</p>
     * @param account Address of XLM account.
     * @param pagination Paging token from the last transaction gives you next page
     * @returns XlmTx OK
     * @throws ApiError
     */
    static xlmGetAccountTx(account: string, pagination?: string): CancelablePromise<Array<XlmTx>>;
    /**
     * Get XLM Transaction by hash
     * <h4>5 credits per API call.</h4><br/><p>Get XLM Transaction by transaction hash.</p>
     * @param hash Transaction hash
     * @returns XlmTx OK
     * @throws ApiError
     */
    static xlmGetTransaction(hash: string): CancelablePromise<XlmTx>;
    /**
     * Get XLM Account info
     * <h4>5 credits per API call.</h4><br/><p>Get XLM Account detail.</p>
     * @param account Account address you want to get balance of
     * @returns XlmAccount OK
     * @throws ApiError
     */
    static xlmGetAccountInfo(account: string): CancelablePromise<XlmAccount>;
    /**
     * Send XLM from address to address
     * <h4>10 credits per API call.</h4><br/>
     * <p>Send XLM from account to account. It is possbile to send native XLM asset, or any other custom asset present on the network.<br/><br/>
     * This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key.
     * No one should ever send it's own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey
     * or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production,
     * <a href="https://github.com/tatumio/tatum-kms" target="_blank">Tatum KMS</a> should be used for the highest security standards, and signatureId should be present in the request.
     * Alternatively, using the Tatum client library for supported languages.
     * </p>
     *
     * @param requestBody
     * @returns any OK
     * @throws ApiError
     */
    static xlmTransferBlockchain(requestBody: (TransferXlmBlockchain | TransferXlmBlockchainAsset | TransferXlmBlockchainKMS | TransferXlmBlockchainKMSAsset)): CancelablePromise<(TransactionHash | SignatureId)>;
    /**
     * Create / Update / Delete XLM trust line
     * <h4>10 credits per API call.</h4><br/><p>
     * <p>Create / Update / Delete XLM trust line between accounts to transfer private assets.
     * By creating trustline for the first time, the asset is created automatically and can be used in the transactions.<br/><br/>
     * This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key.
     * No one should ever send it's own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey
     * or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production,
     * <a href="https://github.com/tatumio/tatum-kms" target="_blank">Tatum KMS</a> should be used for the highest security standards, and signatureId should be present in the request.
     * Alternatively, using the Tatum client library for supported languages.
     * </p>
     *
     * @param requestBody
     * @returns any OK
     * @throws ApiError
     */
    static xlmTrustLineBlockchain(requestBody: (TrustLineXlmBlockchain | TrustLineXlmBlockchainKMS)): CancelablePromise<(TransactionHash | SignatureId)>;
    /**
     * Broadcast signed XLM transaction
     * <h4>5 credits per API call.</h4><br/>
     * <p>Broadcast signed transaction to XLM blockchain. This method is used internally from Tatum KMS or Tatum client libraries.
     * It is possible to create custom signing mechanism and use this method only for broadcasting data to the blockchain.</p>
     *
     * @param requestBody
     * @returns TransactionHash OK
     * @throws ApiError
     */
    static xlmBroadcast(requestBody: BroadcastKMS): CancelablePromise<TransactionHash>;
}
