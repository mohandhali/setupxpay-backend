"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DepositService = void 0;
const request_1 = require("../core/request");
class DepositService {
    /**
     * List all deposits for product
     * <h4>1 credit per API call.</h4><br/><p>Lists all deposits for API key.</p>
     * @param pageSize Max number of items per page is 50.
     * @param page Page number
     * @param sort Direction of sorting. Can be asc or desc
     * @param status Status of the deposit
     * @param currency Filter by currency
     * @param txId Filter by txId
     * @param to Filter by to address
     * @param accountId Filter by account id
     * @returns Deposit OK
     * @throws ApiError
     */
    static getDeposits(pageSize, page, sort, status, currency, txId, to, accountId) {
        return (0, request_1.request)({
            method: 'GET',
            path: `/v3/ledger/deposits`,
            query: {
                'pageSize': pageSize,
                'page': page,
                'sort': sort,
                'status': status,
                'currency': currency,
                'txId': txId,
                'to': to,
                'accountId': accountId,
            },
            errors: {
                400: `Bad Request`,
                401: `Unauthorized. Not valid or inactive subscription key present in the HTTP Header.`,
                500: `Internal server error. There was an error on the server during the processing of the request.`,
            },
        });
    }
    /**
     * Count of found entities for get deposits request
     * <h4>1 credit per API call.</h4><br/><p>Counts total entities found by get deposits request.</p>
     * @param pageSize Max number of items per page is 50.
     * @param page Page number
     * @param sort Direction of sorting. Can be asc or desc
     * @param status Type of the deposit
     * @param currency Filter by currency
     * @param txId Filter by txId
     * @param to Filter by to address
     * @param accountId Filter by account id
     * @returns EntitiesCount OK
     * @throws ApiError
     */
    static getDepositsCount(pageSize, page, sort, status, currency, txId, to, accountId) {
        return (0, request_1.request)({
            method: 'GET',
            path: `/v3/ledger/deposits/count`,
            query: {
                'pageSize': pageSize,
                'page': page,
                'sort': sort,
                'status': status,
                'currency': currency,
                'txId': txId,
                'to': to,
                'accountId': accountId,
            },
            errors: {
                400: `Bad Request`,
                401: `Unauthorized. Not valid or inactive subscription key present in the HTTP Header.`,
                500: `Internal server error. There was an error on the server during the processing of the request.`,
            },
        });
    }
}
exports.DepositService = DepositService;
//# sourceMappingURL=DepositService.js.map