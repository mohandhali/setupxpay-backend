import type { SignatureId } from '../models/SignatureId';
import type { SolanaBlock } from '../models/SolanaBlock';
import type { SolanaBroadcastConfirm } from '../models/SolanaBroadcastConfirm';
import type { SolanaTransactionHashWithConfirm } from '../models/SolanaTransactionHashWithConfirm';
import type { SolanaTx } from '../models/SolanaTx';
import type { SolanaWallet } from '../models/SolanaWallet';
import type { SolBalance } from '../models/SolBalance';
import type { TransactionHash } from '../models/TransactionHash';
import type { TransferSolanaBlockchain } from '../models/TransferSolanaBlockchain';
import type { TransferSolanaBlockchainKMS } from '../models/TransferSolanaBlockchainKMS';
import type { CancelablePromise } from '../core/CancelablePromise';
export declare class SolanaService {
    /**
     * Generate Solana wallet
     * <h4>1 credit per API call.</h4><br/>
     * <p>Generate Solana private key and account address.</p>
     *
     * @returns SolanaWallet OK
     * @throws ApiError
     */
    static solanaGenerateWallet(): CancelablePromise<SolanaWallet>;
    /**
     * @deprecated
     * JSON RPC HTTP driver
     * <p><b>2 credits per API call</b></p>
     * <p><b>This endpoint is deprecated. Use the <a href="https://apidoc.tatum.io/tag/Node-RPC" target="_blank">HTTP-based JSON RPC driver</a> instead.</b></p><br/>
     * <p>Use this endpoint URL as a http-based JSON RPC driver to connect directly to the Solana node provided by Tatum.
     * To learn more about Solana JSON RPC, visit the <a href="https://docs.solana.com/developing/clients/jsonrpc-api" target="_blank">Solana developer's guide</a>.</p>
     *
     * @param xApiKey Tatum X-API-Key used for authorization.
     * @param requestBody
     * @returns any OK
     * @throws ApiError
     */
    static solanaWeb3Driver(xApiKey: string, requestBody: any): CancelablePromise<any>;
    /**
     * Get current block number
     * <h4>1 credit per API call.</h4><br/><p>Get Solana current block number. This is the number of the latest block in the blockchain.</p>
     * @returns number OK
     * @throws ApiError
     */
    static solanaGetCurrentBlock(): CancelablePromise<number>;
    /**
     * Get Solana block by number
     * <h4>1 credit per API call.</h4><br/>
     * <p>Get Solana block by block hash or block number. <br/>
     * You can find full data description here - <a target="blank" href="https://docs.solana.com/developing/clients/jsonrpc-api#getblock">https://docs.solana.com/developing/clients/jsonrpc-api#getblock</a>
     * </p>
     *
     * @param height Block number
     * @returns SolanaBlock OK
     * @throws ApiError
     */
    static solanaGetBlock(height: number): CancelablePromise<SolanaBlock>;
    /**
     * Get Solana Account balance
     * <h4>1 credit per API call.</h4><br/><p>Get Solana account balance in SOL. This method does not prints any balance of the SPL or NFT tokens on the account.</p>
     * @param address Account address you want to get balance of
     * @returns SolBalance OK
     * @throws ApiError
     */
    static solanaGetBalance(address: string): CancelablePromise<SolBalance>;
    /**
     * Get Solana Transaction
     * <h4>2 credit per API call.</h4><br/><p>Get Solana transaction by transaction hash.<br/>
     * You can find full data description here - <a target="blank" href="https://docs.solana.com/developing/clients/jsonrpc-api#gettransaction">https://docs.solana.com/developing/clients/jsonrpc-api#gettransaction</a>
     * </p>
     *
     * @param hash Transaction hash
     * @param commitment Commitment of the transaction. If not defined, all transactions are being scanned.
     * @returns SolanaTx OK
     * @throws ApiError
     */
    static solanaGetTransaction(hash: string, commitment?: 'finalized' | 'confirmed'): CancelablePromise<SolanaTx>;
    /**
     * Send SOL from account to account
     * <h4>2 credits per API call.</h4><br/>
     * <p>Send SOL from account to account.<br/><br/>
     * This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key.
     * No one should ever send it's own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey
     * or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production,
     * <a href="https://github.com/tatumio/tatum-kms" target="_blank">Tatum KMS</a> should be used for the highest security standards, and signatureId should be present in the request.
     * Alternatively, using the Tatum client library for supported languages.
     * </p>
     *
     * @param requestBody
     * @returns any OK
     * @throws ApiError
     */
    static solanaBlockchainTransfer(requestBody: (TransferSolanaBlockchain | TransferSolanaBlockchainKMS)): CancelablePromise<(TransactionHash | SignatureId)>;
    /**
     * Broadcast and confirm signed Solana transaction
     * <h4>10 credits per API call.</h4><br/>
     * <p>Broadcast signed custom transactions to Solana blockchain and waits for transaction confirmation depending on the commitment given. More information about commitment levels <a target="_blank" href="https://docs.solana.com/ru/developing/clients/jsonrpc-api#configuring-state-commitment">here</a></p>
     *
     * @param requestBody
     * @returns SolanaTransactionHashWithConfirm OK
     * @throws ApiError
     */
    static solanaBroadcastConfirm(requestBody: SolanaBroadcastConfirm): CancelablePromise<SolanaTransactionHashWithConfirm>;
}
