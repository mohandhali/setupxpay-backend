import { AccountService, AlgorandService, AuctionService, AvalancheService, BaseService, BitcoinCashService, BitcoinService, BlockchainAddressesService, BlockchainFeesService, BlockchainOperationsService, BlockchainStorageService, BlockchainUtilsService, BnbBeaconChainService, BnbSmartChainService, CardanoService, CeloService, CronosService, CustodialManagedWalletsService, CustomerService, TokenApiService, NftApiService, WalletApiService, DeFiApiService, DogecoinService, ElrondService, EthereumService, ExchangeRateService, FlareService, FlowService, FungibleTokensErc20OrCompatibleService, GasPumpService, HarmonyService, IpfsService, KeyManagementSystemService, KlaytnService, KuCoinService, LitecoinService, MaliciousAddressService, MarketplaceService, MultiTokensErc1155OrCompatibleService, NftErc721OrCompatibleService, NotificationSubscriptionsService, OptimismService, OrderBookService, PolygonService, ServiceUtilsService, SolanaService, StellarService, TransactionService, TronService, VeChainService, VirtualCurrencyService, WithdrawalService, XinFinService, XrpService, FantomService } from '../generated';
import { SonicTatumApiService } from '../generated/services/SonicTatumApiService';
export declare type TatumApiType = ReturnType<typeof TatumApi>;
export declare type TatumUrlArg = string;
export declare const TATUM_API_CONSTANTS: {
    URL: string;
    HEADER_API_KEY: string;
    NODE_TYPE_KEY: string;
    API_VERSION: string;
    API_KEY: string;
    TRON_PRO_API_KEY: string;
};
export declare function TatumApi(apiKey: string, url?: string): {
    blockchain: {
        ada: typeof CardanoService;
        avalanche: typeof AvalancheService;
        algo: typeof AlgorandService;
        base: typeof BaseService;
        bnb: typeof BnbBeaconChainService;
        bitcoin: typeof BitcoinService;
        bcash: typeof BitcoinCashService;
        bsc: typeof BnbSmartChainService;
        celo: typeof CeloService;
        cronos: typeof CronosService;
        doge: typeof DogecoinService;
        elgo: typeof ElrondService;
        eth: typeof EthereumService;
        flare: typeof FlareService;
        flow: typeof FlowService;
        one: typeof HarmonyService;
        kcs: typeof KuCoinService;
        klaytn: typeof KlaytnService;
        ltc: typeof LitecoinService;
        polygon: typeof PolygonService;
        solana: typeof SolanaService;
        optimism: typeof OptimismService;
        fantom: typeof FantomService;
        tron: typeof TronService;
        util: typeof BlockchainUtilsService;
        gasPump: typeof GasPumpService;
        vechain: typeof VeChainService;
        xdc: typeof XinFinService;
        xlm: typeof StellarService;
        xrp: typeof XrpService;
        sonic: typeof SonicTatumApiService;
    };
    fee: typeof BlockchainFeesService;
    ipfs: typeof IpfsService;
    fungibleToken: typeof FungibleTokensErc20OrCompatibleService;
    marketplace: typeof MarketplaceService;
    multiToken: typeof MultiTokensErc1155OrCompatibleService;
    nft: typeof NftErc721OrCompatibleService;
    record: typeof BlockchainStorageService;
    ledger: {
        account: typeof AccountService;
        customer: typeof CustomerService;
        orderBook: typeof OrderBookService;
        subscriptions: typeof NotificationSubscriptionsService;
        transaction: typeof TransactionService;
        virtualCurrency: typeof VirtualCurrencyService;
    };
    virtualAccount: {
        account: typeof BlockchainAddressesService;
        blockchain: typeof BlockchainOperationsService;
        withdrawal: typeof WithdrawalService;
    };
    security: typeof MaliciousAddressService;
    kms: typeof KeyManagementSystemService;
    exchangeRate: typeof ExchangeRateService;
    tatum: typeof ServiceUtilsService;
    custodial: typeof CustodialManagedWalletsService;
    auction: typeof AuctionService;
    gasPump: typeof GasPumpService;
    data: {
        defi: typeof DeFiApiService;
        wallet: typeof WalletApiService;
        token: typeof TokenApiService;
        nftService: typeof NftApiService;
    };
};
export declare type BtcBasedApiService = BitcoinService | BitcoinCashService | DogecoinService | LitecoinService;
export declare type EvmBasedApiService = EthereumService | CeloService;
export declare const ApiServices: {
    blockchain: {
        ada: typeof CardanoService;
        avalanche: typeof AvalancheService;
        algo: typeof AlgorandService;
        base: typeof BaseService;
        bnb: typeof BnbBeaconChainService;
        bitcoin: typeof BitcoinService;
        bcash: typeof BitcoinCashService;
        bsc: typeof BnbSmartChainService;
        celo: typeof CeloService;
        cronos: typeof CronosService;
        doge: typeof DogecoinService;
        elgo: typeof ElrondService;
        eth: typeof EthereumService;
        flare: typeof FlareService;
        flow: typeof FlowService;
        one: typeof HarmonyService;
        kcs: typeof KuCoinService;
        klaytn: typeof KlaytnService;
        ltc: typeof LitecoinService;
        polygon: typeof PolygonService;
        solana: typeof SolanaService;
        optimism: typeof OptimismService;
        fantom: typeof FantomService;
        tron: typeof TronService;
        util: typeof BlockchainUtilsService;
        gasPump: typeof GasPumpService;
        vechain: typeof VeChainService;
        xdc: typeof XinFinService;
        xlm: typeof StellarService;
        xrp: typeof XrpService;
        sonic: typeof SonicTatumApiService;
    };
    fee: typeof BlockchainFeesService;
    ipfs: typeof IpfsService;
    fungibleToken: typeof FungibleTokensErc20OrCompatibleService;
    marketplace: typeof MarketplaceService;
    multiToken: typeof MultiTokensErc1155OrCompatibleService;
    nft: typeof NftErc721OrCompatibleService;
    record: typeof BlockchainStorageService;
    ledger: {
        account: typeof AccountService;
        customer: typeof CustomerService;
        orderBook: typeof OrderBookService;
        subscriptions: typeof NotificationSubscriptionsService;
        transaction: typeof TransactionService;
        virtualCurrency: typeof VirtualCurrencyService;
    };
    virtualAccount: {
        account: typeof BlockchainAddressesService;
        blockchain: typeof BlockchainOperationsService;
        withdrawal: typeof WithdrawalService;
    };
    security: typeof MaliciousAddressService;
    kms: typeof KeyManagementSystemService;
    exchangeRate: typeof ExchangeRateService;
    tatum: typeof ServiceUtilsService;
    custodial: typeof CustodialManagedWalletsService;
    auction: typeof AuctionService;
    gasPump: typeof GasPumpService;
    data: {
        defi: typeof DeFiApiService;
        wallet: typeof WalletApiService;
        token: typeof TokenApiService;
        nftService: typeof NftApiService;
    };
};
