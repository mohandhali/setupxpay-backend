"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiServices = exports.TatumApi = exports.TATUM_API_CONSTANTS = void 0;
const generated_1 = require("../generated");
const OpenAPI_1 = require("../generated/core/OpenAPI");
const SonicTatumApiService_1 = require("../generated/services/SonicTatumApiService");
exports.TATUM_API_CONSTANTS = {
    URL: 'https://api.tatum.io',
    HEADER_API_KEY: 'x-api-key',
    NODE_TYPE_KEY: 'x-node-type',
    API_VERSION: 'v3',
    API_KEY: '',
    TRON_PRO_API_KEY: '',
};
function TatumApi(apiKey, url = exports.TATUM_API_CONSTANTS.URL) {
    var _a;
    OpenAPI_1.OpenAPI.HEADERS = { [exports.TATUM_API_CONSTANTS.HEADER_API_KEY]: apiKey };
    OpenAPI_1.OpenAPI.BASE = (_a = process.env['TATUM_API_URL']) !== null && _a !== void 0 ? _a : url;
    // @TODO
    exports.TATUM_API_CONSTANTS.API_KEY = apiKey;
    return exports.ApiServices;
}
exports.TatumApi = TatumApi;
exports.ApiServices = {
    blockchain: {
        ada: generated_1.CardanoService,
        avalanche: generated_1.AvalancheService,
        algo: generated_1.AlgorandService,
        base: generated_1.BaseService,
        bnb: generated_1.BnbBeaconChainService,
        bitcoin: generated_1.BitcoinService,
        bcash: generated_1.BitcoinCashService,
        bsc: generated_1.BnbSmartChainService,
        celo: generated_1.CeloService,
        cronos: generated_1.CronosService,
        doge: generated_1.DogecoinService,
        elgo: generated_1.ElrondService,
        eth: generated_1.EthereumService,
        flare: generated_1.FlareService,
        flow: generated_1.FlowService,
        one: generated_1.HarmonyService,
        kcs: generated_1.KuCoinService,
        klaytn: generated_1.KlaytnService,
        ltc: generated_1.LitecoinService,
        polygon: generated_1.PolygonService,
        solana: generated_1.SolanaService,
        optimism: generated_1.OptimismService,
        fantom: generated_1.FantomService,
        tron: generated_1.TronService,
        util: generated_1.BlockchainUtilsService,
        gasPump: generated_1.GasPumpService,
        vechain: generated_1.VeChainService,
        xdc: generated_1.XinFinService,
        xlm: generated_1.StellarService,
        xrp: generated_1.XrpService,
        sonic: SonicTatumApiService_1.SonicTatumApiService,
    },
    fee: generated_1.BlockchainFeesService,
    ipfs: generated_1.IpfsService,
    fungibleToken: generated_1.FungibleTokensErc20OrCompatibleService,
    marketplace: generated_1.MarketplaceService,
    multiToken: generated_1.MultiTokensErc1155OrCompatibleService,
    nft: generated_1.NftErc721OrCompatibleService,
    record: generated_1.BlockchainStorageService,
    ledger: {
        account: generated_1.AccountService,
        customer: generated_1.CustomerService,
        orderBook: generated_1.OrderBookService,
        subscriptions: generated_1.NotificationSubscriptionsService,
        transaction: generated_1.TransactionService,
        virtualCurrency: generated_1.VirtualCurrencyService,
    },
    virtualAccount: {
        account: generated_1.BlockchainAddressesService,
        blockchain: generated_1.BlockchainOperationsService,
        withdrawal: generated_1.WithdrawalService,
    },
    security: generated_1.MaliciousAddressService,
    kms: generated_1.KeyManagementSystemService,
    exchangeRate: generated_1.ExchangeRateService,
    tatum: generated_1.ServiceUtilsService,
    custodial: generated_1.CustodialManagedWalletsService,
    auction: generated_1.AuctionService,
    gasPump: generated_1.GasPumpService,
    data: {
        defi: generated_1.DeFiApiService,
        wallet: generated_1.WalletApiService,
        token: generated_1.TokenApiService,
        nftService: generated_1.NftApiService,
    },
};
//# sourceMappingURL=api-client.js.map