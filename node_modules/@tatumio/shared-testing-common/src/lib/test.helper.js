"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.testHelper = void 0;
const tslib_1 = require("tslib");
exports.testHelper = {
    callFnWithArgs: (fn, args) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        switch (args.length) {
            case 0:
                yield fn();
                break;
            case 1:
                yield fn(args[0]);
                break;
            case 2:
                yield fn(args[0], args[1]);
                break;
            case 3:
                yield fn(args[0], args[1], args[2]);
                break;
            case 4:
                yield fn(args[0], args[1], args[2], args[3]);
                break;
            default:
                throw new Error('Too many arguments');
        }
    }),
    expectMockCalled: (mocked, body) => {
        expect(mocked.mock.calls.length).toBe(1);
        if (body)
            expect(mocked.mock.calls).toEqual([body]);
    },
    expectMockNotCalled: (mocked) => {
        expect(mocked.mock.calls.length).toBe(0);
    },
    testCasesFromMapping: (mapping) => {
        const result = Object.entries(mapping).map(([key, value]) => {
            if (!(value instanceof Array))
                return [key, value];
            if (value.length == 1) {
                return [key, value];
            }
            else {
                return [key, value[0], [value.splice(1)]];
            }
        });
        return result;
    },
};
//# sourceMappingURL=test.helper.js.map