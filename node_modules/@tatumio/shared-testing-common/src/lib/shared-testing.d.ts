export declare type BlockchainNetworkTestData = {
    XPUB: string;
    XPUB_REGEX: RegExp;
    ADDRESS_0: string;
    ADDRESS_100: string;
    PRIVATE_KEY_0: string;
    PRIVATE_KEY_100: string;
    CONTRACT_ADDRESS?: string;
    SERIALIZED_TX?: string;
    ERC_20?: {
        CONTRACT_ADDRESS: string;
        PRIVATE_KEY: string;
        ADDRESS: string;
    };
    PROVIDER?: string;
    ERC_721?: {
        PRIVATE_KEY: string;
        CONTRACT_ADDRESS: string;
        ADDRESS?: string;
    };
    MULTITOKEN?: {
        PRIVATE_KEY: string;
        CONTRACT_ADDRESS: string;
        ADDRESS?: string;
    };
    SMART_CONTRACT?: {
        PRIVATE_KEY: string;
        CONTRACT_ADDRESS: string;
    };
    CUSTODIAL?: {
        PRIVATE_KEY: string;
        SIGNATURE_ID: string;
        CONTRACT_ADDRESS: string;
        TOKEN_ADDRESS: string;
        SLAVE_ADDRESS?: string;
        MASTER_ADDRESS?: string;
    };
};
export interface BlockchainTestData {
    MAINNET: BlockchainNetworkTestData;
    TESTNET: BlockchainNetworkTestData;
    TX_HASH: string;
    BLOCK_HASH: string;
    BLOCK_HEIGHT: number;
    INVALID_XPUB_ERROR: string;
    INVALID_XPUB_CHILD_INDEX_ERROR: string;
    INVALID_PRIVATE_KEY_CHILD_INDEX_ERROR: string;
    INVALID_PRIVATE_KEY_ERROR: string;
    PROVIDER?: string;
    AUCTIONS?: any;
}
export declare const TEST_DATA: {
    MNEMONIC: string;
    ETH: BlockchainTestData;
    BTC: BlockchainTestData;
    DOGE: BlockchainTestData;
    CELO: BlockchainTestData;
    BCH: BlockchainTestData;
    LTC: BlockchainTestData;
    POLYGON: BlockchainTestData;
    KLAYTN: BlockchainTestData;
    KCS: BlockchainTestData;
    ONE: BlockchainTestData;
    BSC: BlockchainTestData;
    XRP: {
        BLOCK_HASH: string;
        BLOCK_NUMBER: number;
        ADDRESS: string;
        SECRET: string;
        TX_HASH: string;
        ADDRESS_REGEX: RegExp;
        SECRET_REGEX: RegExp;
    };
    XLM: {
        BLOCK_HASH: string;
        SEQUENCE: number;
        TX_HASH: string;
        ADDRESS: string;
        SECRET: string;
        ADDRESS_REGEX: RegExp;
        SECRET_REGEX: RegExp;
    };
    XDC: BlockchainTestData;
    SCRYPTA: BlockchainTestData;
    FLOW: {
        TESTNET: {
            XPUB: string;
            PRIVATE_KEY_0: string;
            PRIVATE_KEY_100: string;
            ADDRESS_0: string;
            ADDRESS_100: string;
            XPUB_REGEX: RegExp;
        };
        MAINNET: {
            XPUB: string;
            PRIVATE_KEY_0: string;
            PRIVATE_KEY_100: string;
            ADDRESS_0: string;
            ADDRESS_100: string;
            XPUB_REGEX: RegExp;
        };
        ACCOUNT: string;
        INVALID_XPUB_CHILD_INDEX_ERROR: string;
        INVALID_PRIVATE_KEY_CHILD_INDEX_ERROR: string;
        INVALID_PRIVATE_KEY_ERROR: string;
        TX_HASH: string;
        BLOCK_HASH: string;
        BLOCK_HEIGHT: number;
        INVALID_XPUB_ERROR: string;
        PROVIDER?: string;
        AUCTIONS?: any;
    };
    SOLANA: {
        PROVIDER: string;
        MNEMONIC: string;
        ADDRESS: string;
        PRIVATE_KEY: string;
        SIGNATURE_ID: string;
        TO_ADDRESS: string;
        CONTRACT_ADDRESS: string;
        BLOCK_HEIGHT: number;
        TX_HASH: string;
    };
    TRON: Pick<BlockchainTestData, "BLOCK_HASH" | "BLOCK_HEIGHT" | "TESTNET" | "TX_HASH">;
    ALGO: Pick<BlockchainTestData, "BLOCK_HASH" | "BLOCK_HEIGHT" | "TESTNET" | "TX_HASH">;
    EGLD: {
        BLOCK_HASH: string;
        TX_HASH: string;
        ADDRESS_0: string;
        ADDRESS_100: string;
        PRIVATE_KEY_0: string;
        PRIVATE_KEY_100: string;
    };
    FLR: BlockchainTestData;
    CRO: BlockchainTestData;
    BASE: BlockchainTestData;
    AVAX: BlockchainTestData;
    OPTIMISM: BlockchainTestData;
    FTM: BlockchainTestData;
};
export declare function expectHexString(value: string): void;
/**
 * @deprecated Replace it with API key from https://tatum.io/
 */
export declare const REPLACE_ME_WITH_TATUM_API_KEY: string;
