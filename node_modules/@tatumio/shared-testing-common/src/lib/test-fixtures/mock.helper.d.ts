import * as apiClient from '@tatumio/api-client';
declare const ApiError: any;
export declare const mockHelper: {
    /**
     * Make sure to add
     * jest.mock('@tatumio/api-client')
     */
    mockApi: (client: typeof apiClient) => jest.MockedObjectDeep<{
        blockchain: {
            ada: typeof apiClient.CardanoService;
            avalanche: typeof apiClient.AvalancheService;
            algo: typeof apiClient.AlgorandService;
            base: typeof apiClient.BaseService;
            bnb: typeof apiClient.BnbBeaconChainService;
            bitcoin: typeof apiClient.BitcoinService;
            bcash: typeof apiClient.BitcoinCashService;
            bsc: typeof apiClient.BnbSmartChainService;
            celo: typeof apiClient.CeloService;
            cronos: typeof apiClient.CronosService;
            doge: typeof apiClient.DogecoinService;
            elgo: typeof apiClient.ElrondService;
            eth: typeof apiClient.EthereumService;
            flare: typeof apiClient.FlareService;
            flow: typeof apiClient.FlowService;
            one: typeof apiClient.HarmonyService;
            kcs: typeof apiClient.KuCoinService;
            klaytn: typeof apiClient.KlaytnService;
            ltc: typeof apiClient.LitecoinService;
            polygon: typeof apiClient.PolygonService;
            solana: typeof apiClient.SolanaService;
            optimism: typeof apiClient.OptimismService;
            fantom: typeof apiClient.FantomService;
            tron: typeof apiClient.TronService;
            util: typeof apiClient.BlockchainUtilsService;
            gasPump: typeof apiClient.GasPumpService;
            vechain: typeof apiClient.VeChainService;
            xdc: typeof apiClient.XinFinService;
            xlm: typeof apiClient.StellarService;
            xrp: typeof apiClient.XrpService;
            sonic: typeof apiClient.SonicService;
        };
        fee: typeof apiClient.BlockchainFeesService;
        ipfs: typeof apiClient.IpfsService;
        fungibleToken: typeof apiClient.FungibleTokensErc20OrCompatibleService;
        marketplace: typeof apiClient.MarketplaceService;
        multiToken: typeof apiClient.MultiTokensErc1155OrCompatibleService;
        nft: typeof apiClient.NftErc721OrCompatibleService;
        record: typeof apiClient.BlockchainStorageService;
        ledger: {
            account: typeof apiClient.AccountService;
            customer: typeof apiClient.CustomerService;
            orderBook: typeof apiClient.OrderBookService;
            subscriptions: typeof apiClient.NotificationSubscriptionsService;
            transaction: typeof apiClient.TransactionService;
            virtualCurrency: typeof apiClient.VirtualCurrencyService;
        };
        virtualAccount: {
            account: typeof apiClient.BlockchainAddressesService;
            blockchain: typeof apiClient.BlockchainOperationsService;
            withdrawal: typeof apiClient.WithdrawalService;
        };
        security: typeof apiClient.MaliciousAddressService;
        kms: typeof apiClient.KeyManagementSystemService;
        exchangeRate: typeof apiClient.ExchangeRateService;
        tatum: typeof apiClient.ServiceUtilsService;
        custodial: typeof apiClient.CustodialManagedWalletsService;
        auction: typeof apiClient.AuctionService;
        gasPump: typeof apiClient.GasPumpService;
        data: {
            defi: typeof apiClient.DeFiApiService;
            wallet: typeof apiClient.WalletApiService;
            token: typeof apiClient.TokenApiService;
            nftService: typeof apiClient.NftApiService;
        };
    }>;
    apiError: {
        notFound: (status?: number, errorCode?: string) => typeof ApiError;
    };
};
export declare type MockedApi = ReturnType<typeof mockHelper.mockApi>;
export {};
